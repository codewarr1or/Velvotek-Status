{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis project is Velvotek Status, a real-time system monitoring dashboard built with React, Express, and WebSockets. It provides a terminal-style interface that displays live system metrics, service status monitoring, process information, and incident tracking. The application mimics a classic Unix system monitor aesthetic with dark themes and monospace fonts, featuring auto-refreshing data and real-time updates via WebSocket connections.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client is built with React and TypeScript using Vite as the build tool. The UI follows a terminal/console aesthetic using Tailwind CSS with custom color schemes and the shadcn/ui component library for consistent design patterns. The application uses Wouter for client-side routing and TanStack Query for state management and data fetching. Real-time updates are handled through a custom WebSocket hook that maintains persistent connections with automatic reconnection logic.\n\n## Backend Architecture\nThe server runs on Express.js with TypeScript and implements a RESTful API structure. The application uses a layered architecture with separate modules for routing, storage, and system monitoring services. WebSocket integration provides real-time bidirectional communication between server and clients. The system monitoring service generates realistic system metrics and process data, simulating CPU usage, memory consumption, network activity, and process information.\n\n## Data Storage Strategy\nThe application currently uses an in-memory storage implementation that simulates database operations for services, incidents, system metrics, and processes. The storage layer is abstracted through interfaces, making it easy to swap to a persistent database solution. Drizzle ORM is configured for PostgreSQL integration with schema definitions ready for database migration when needed.\n\n## Real-time Communication\nWebSocket connections handle live data streaming between server and clients. The server broadcasts system updates every 2 seconds and service status changes every 30 seconds. Clients automatically reconnect on connection loss with exponential backoff. Message types include system updates with metrics/processes and incident notifications.\n\n## Component Architecture\nThe frontend uses a modular component structure with dedicated components for different dashboard sections: SystemOverview for service status cards, ResourceMonitoring for CPU/memory/network metrics, ServiceDetails for detailed service tables, IncidentHistory for incident tracking, and NotificationFooter for user engagement features. Each component handles its own data rendering and state management while receiving data through props from the main dashboard container.\n\n## Styling and Design System\nThe application implements a custom dark theme with terminal-inspired aesthetics using CSS custom properties for consistent theming. Tailwind CSS provides utility classes while shadcn/ui components ensure accessibility and consistency. The design includes retro terminal elements like ASCII borders, monospace fonts (JetBrains Mono, Fira Code), terminal-style progress bars using Unicode block characters, and blinking cursor effects.\n\n# External Dependencies\n\n## UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **shadcn/ui**: Pre-built accessible React component library based on Radix UI\n- **Radix UI**: Low-level UI primitives for building accessible components\n- **class-variance-authority**: Utility for creating component variants\n- **Lucide React**: Icon library for UI elements\n\n## State Management and Data Fetching\n- **TanStack React Query**: Server state management and data fetching\n- **Wouter**: Lightweight client-side routing\n\n## Backend Framework and Database\n- **Express.js**: Web application framework for Node.js\n- **Drizzle ORM**: TypeScript ORM configured for PostgreSQL\n- **Neon Database**: Serverless PostgreSQL database service (@neondatabase/serverless)\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n## Real-time Communication\n- **ws**: WebSocket library for real-time bidirectional communication\n\n## Development and Build Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Type safety and enhanced development experience\n- **Replit plugins**: Development environment integration and error handling","size_bytes":4470},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        warning: \"var(--warning)\",\n      },\n      fontFamily: {\n        mono: [\"var(--font-mono)\"],\n        sans: [\"var(--font-sans)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        blink: {\n          \"0%, 50%\": { opacity: \"1\" },\n          \"51%, 100%\": { opacity: \"0\" },\n        },\n        \"terminal-glow\": {\n          \"0%\": { \"text-shadow\": \"0 0 5px currentColor\" },\n          \"100%\": { \"text-shadow\": \"0 0 10px currentColor, 0 0 15px currentColor\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        blink: \"blink 1s infinite\",\n        \"terminal-glow\": \"terminal-glow 2s ease-in-out infinite alternate\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3165},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});","size_bytes":686},"attached_assets/content-1756929620572.md":{"content":"WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\n\n╭─┐¹cpu┌──┐menu┌┐preset \\*┌─────────────────────────────────────────────────────────────────────────────┐15:00┌────────────────────────────────────────────────────────────────────────────────────────┐\\- 100ms +┌─╮\n\n│╭─┐Ryzen 7 7735HS┌─────────────────────────────────────────────────────────────────────────────────────────────┐2.9 GHz┌╮│\n\n││CPU ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 16%││\n\n│ ⣤⣤⣴⣤⣦⣤⣤⣤⣤│C0 ⣀⣠⡀⣀⣀⡀⣀⣠⣀⢠ 40%│C3 ⣀⡀⣀⣀⣀⣀⣄⢀⣤⣀ 0%│C6 ⣀⡀⣴⣀⣀⣄⣠⣠⣄⣰ 70%│C9 ⣀⡀⣀⣠⣀⣀⢀⣀⡄⡀ 0%│C12 ⣀⡀⣴⡄⣆⣀⣄⡀⣠⡀ 0%│C15 ⣀⡀⢀⣀⣀⡀⢀⣀⣀⣀ 0%││\n\n│ ⠛⠛⠻⠛⠟⠛⠛⠛⠛│C1 ⣀⡀⣀⢀⣀⡀⣀⣀⣀⣀ 0%│C4 ⣀⡀⣀⣀⡀⣀⢠⣄⣤⣄ 10%│C7 ⣀⡀⢀⢀⣀⣀⣀⣀⡀⡀ 0%│C10 ⣀⡀⣀⣠⣸⣆⣠⣀⡄⢀ 18%│C13 ⣀⡀⡄⢀⣀⡀⣀⣀⣀⣀ 0%│││\n\n││C2 ⣀⡀⣀⣤⣤⢰⣠⣆⣀⣀ 10%│C5 ⣀⡀⣀⢀⣸⣇⣀⣀⣀⢠ 40%│C8 ⣀⣸⣄⣴⡀⣠⣀⡀⣠⣆ 27%│C11 ⣀⡀⣆⢀⣀⣤⣄⣀⣀⣀ 11%│C14 ⣀⡀⢠⣴⣄⣤⢰⣄⢀⣤ 45%│LAV: 2.19 2.49 2.55││\n\n│up34d17:37╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯│\n\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n╭─┐²mem┌──────────────────────────────────────┬─┐disks┌──────────────────────────────────┐io┌─╮╭─┐⁴proc┌┐filter┌────────────────────────────────────────────────────────────┐per-core┌┐reverse┌┐tree┌┐< memory >┌─╮\n\n│ Total: 61.9 GiB├─root──────────────────────────────────213─GiB─┤│ Pid: Program: Command: Threads: User: MemB Cpu%↑│\n\n│ Used ⣤⣤⣤⣤⣤⣤⣤⣤⣤ 19.8 GiB│ Used: 44% ■■■■■■■■■■■■■■■■■■■■■■■■■■ 92.7 GiB ││ 1633 windows qemu-system-x86\\_64 -nodefaults -cpu host,kvm=on,l3-ca  6 root  3.9G⣀⢀⡀⣀⣀ 0.0 █│\n\n│ Avail ⣶⣶⣶⣶⣶⣶⣶⣶⣶ 42.0 GiB├─swap─────────────────────────────────39.1─GiB─┤│ 21381 jellyfin /volume1/@appstore/jellyfin/share/jellyfin --service  26 187774  2.9G⣀⣀⢀⣀⣀ 0.0 │\n\n│ Cache ⣤⣤⣤⣤⣤⣤⣤⣤⣤ 26.8 GiB│ Used: 12% ■■■■■■■■■■■■■■■■■■■■■■■■■■ 4.69 GiB ││ 1748 bedrock\\_server ./bedrock\\_server  20 1000  1.1G⣀⡀⢀⡀⣀ 0.0 │\n\n│ Free ⣀⣀⣀⣀⣀⣀⣀⣀⣀ 7.16 GiB├─localtime────────────────────────────7.81─GiB─┤│ 27097 python3 /usr/local/bin/python3 -m uvicorn open\\_webui.main:app  39 root  456M⣀⣀⣀⣀⣀ 0.0 │\n\n├─────────────────────────────────────────────┤ IO% ⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀ ││ 2967 node node /usr/local/bin/n8n  12 root  290M⣀⣀⣀⣀⣀ 0.0 │\n\n│ │ Used: 21% ■■■■■■■■■■■■■■■■■■■■■■■■■■ 1.62 GiB ││ 22285 node node dist/index.js  11 154477  287M⣀⣀⣀⣀⣀ 0.0 │\n\n╰─────────────────────────────────────────────┴───────────────────────────────────────────────╯│ 29036 node node apps/tasks/tasks.cjs  11 root  245M⣀⣀⣀⣀⣀ 0.0 │\n\n╭─┐³net┌┐172.27.0.2┌────────────────────────────────────────────┐sync┌┐auto┌┐zero┌┐<b eth0 n>┌╮│ 27384 ollama /bin/ollama serve  23 root  203M⣀⣀⣀⣀⣀ 0.0 │\n\n│22K ⣴⣦⣠⣄⣀⣠⣀⣀╭─┐download┌──────────────╮││ 552 gunicorn /src/.venv/bin/python /src/.venv/bin/gunicorn --bind=  7 1026  194M⣀⣀⣀⣀⣀ 0.0 │\n\n│ ⢀⣿⣿⣿⣿⣿⣿⣿⣿│▼ 13.5 KiB/s (108 Kibps)│││ 20579 mariadbd /usr/local/mariadb10/bin/mariadbd --basedir=/usr/loca  10 66  182M⣀⣀⣀⣀⣀ 0.0 │\n\n│ ⠈⣿⣿⣿⣿⣿⣿⣿⣿││││ 29909 Prowlarr /app/bin/Prowlarr --nobrowser --data=/config  21 1028  164M⣀⣀⣀⣀⣀ 0.0 │\n\n│ ⣿⣿⣿⣿⣿⣿⣿⣿│▲ 608 KiB/s (4.75 Mibps)│││ 29207 Sonarr /app/bin/Sonarr --nobrowser --data=/config  21 1028  146M⣀⣀⣀⣀⣀ 0.0 │\n\n│811K ⡇ ⠉⠉⠉⠉⠉⠉╰─┘upload└────────────────╯││ 25596 node node ./main.cjs  11 1026  135M⣀⣀⣀⣀⣀ 0.0 ↓│\n\n╰─────────────────────────────────────────────────────────────────────────────────────────────╯╰┘↑ select ↓└┘info ↵└┘terminate└┘kill└┘signals└────────────────────────────────────────────────────────────┘0/1061└╯\n\n211x24\n\n└└└└└└└└└└└└└└└└└└└└└└└└└└└└└└└└////////////////////////////////","size_bytes":7599},"attached_assets/content-1756929910026.md":{"content":"WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\n\n╭─┐¹cpu┌──┐menu┌┐preset \\*┌─────────────────────────────────────────────────────────────────────────────┐15:05┌────────────────────────────────────────────────────────────────────────────────────────┐\\- 100ms +┌─╮\n\n│╭─┐Ryzen 7 7735HS┌─────────────────────────────────────────────────────────────────────────────────────────────┐1.6 GHz┌╮│\n\n││CPU ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 16%││\n\n│ ⣼⣤⣤⣤⣦⣤⣤⣤⣤│C0 ⣀⡀⣀⡀⣀⣀⡄⣤⣀⣤ 30%│C3 ⣀⡀⣄⣠⣀⣀⡀⢀⣰⣀ 11%│C6 ⣀⡀⣀⣀⢰⢸⣄⢀⡄⢀ 10%│C9 ⣀⡀⡀⣀⣀⣀⡀⢀⣀⣀ 0%│C12 ⣀⡀⣆⣆⣀⣄⣄⣠⣤⣄ 9%│C15 ⣀⡀⡀⣀⣀⢀⢀⣴⣀⢀ 9%││\n\n│ ⢻⠛⠛⠛⠟⠛⠛⠛⠛│C1 ⣀⡀⡀⢀⣀⣄⢀⢀⡀⢀ 9%│C4 ⣀⡀⢀⡀⣀⣠⣤⢀⡀⣄ 18%│C7 ⣀⡀⣀⣀⣀⡆⣀⣀⣀⢀ 10%│C10 ⣀⡀⣤⣤⣤⣆⡄⣀⡀⢠ 30%│C13 ⣀⡀⣀⡄⣀⡀⡀⣀⣀⣀ 0%│││\n\n││C2 ⣀⡀⡀⣤⣠⣤⣄⣆⣤⣶ 56%│C5 ⣀⡀⢠⡀⣀⣄⣀⣀⢀⢠ 45%│C8 ⣀⡀⣴⡀⣀⣀⣰⣀⣠⣀ 10%│C11 ⣀⡀⡀⣀⡄⣀⡀⣀⣀⣀ 0%│C14 ⣀⡀⣀⣠⣀⣀⣴⡄⡀⣤ 36%│LAV: 2.10 2.41 2.51││\n\n│up34d17:42╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯│\n\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n╭─┐²mem┌──────────────────────────────────────┬─┐disks┌──────────────────────────────────┐io┌─╮╭─┐⁴proc┌┐filter┌────────────────────────────────────────────────────────────┐per-core┌┐reverse┌┐tree┌┐< memory >┌─╮\n\n│ Total: 61.9 GiB├─root──────────────────────────────────213─GiB─┤│ Pid: Program: Command: Threads: User: MemB Cpu%↑│\n\n│ Used ⣤⣤⣤⣤⣤⣤⣤⣤⣤ 19.8 GiB│ Used: 43% ■■■■■■■■■■■■■■■■■■■■■■■■■■ 92.6 GiB ││ 1633 windows qemu-system-x86\\_64 -nodefaults -cpu host,kvm=on,l3-ca  6 root  3.9G⡀⣀⣀⣀⡀ 0.0 █│\n\n│ Avail ⣶⣶⣶⣶⣶⣶⣶⣶⣶ 42.0 GiB├─swap─────────────────────────────────39.1─GiB─┤│ 21381 jellyfin /volume1/@appstore/jellyfin/share/jellyfin --service  30 187774  2.9G⣀⣀⣀⣀⣀ 0.0 │\n\n│ Cache ⣤⣤⣤⣤⣤⣤⣤⣤⣤ 26.7 GiB│ Used: 12% ■■■■■■■■■■■■■■■■■■■■■■■■■■ 4.69 GiB ││ 1748 bedrock\\_server ./bedrock\\_server  20 1000  1.1G⣀⡀⣀⡀⣀ 0.0 │\n\n│ Free ⣀⣀⣀⣀⣀⣀⣀⣀⣀ 7.23 GiB├─localtime────────────────────────────7.81─GiB─┤│ 27097 python3 /usr/local/bin/python3 -m uvicorn open\\_webui.main:app  39 root  456M⣀⣀⣀⣀⣀ 0.0 │\n\n├─────────────────────────────────────────────┤ IO% ⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀ ││ 22285 node node dist/index.js  11 154477  340M⣀⣀⣀⣀⣀ 0.0 │\n\n│ │ Used: 21% ■■■■■■■■■■■■■■■■■■■■■■■■■■ 1.62 GiB ││ 2967 node node /usr/local/bin/n8n  12 root  285M⣀⣀⣀⡀⣀ 0.0 │\n\n╰─────────────────────────────────────────────┴───────────────────────────────────────────────╯│ 29036 node node apps/tasks/tasks.cjs  11 root  242M⣀⣀⣀⣀⣀ 0.0 │\n\n╭─┐³net┌┐172.27.0.2┌────────────────────────────────────────────┐sync┌┐auto┌┐zero┌┐<b eth0 n>┌╮│ 27384 ollama /bin/ollama serve  23 root  203M⣀⣀⣀⣀⣀ 0.0 │\n\n│22K ⣴⣠⣦⣀⣤⣀⣠⣤╭─┐download┌──────────────╮││ 552 gunicorn /src/.venv/bin/python /src/.venv/bin/gunicorn --bind=  7 1026  194M⣀⣀⣀⣀⣀ 0.0 │\n\n│ ⢀⣿⣿⣿⣿⣿⣿⣿⣿│▼ 15.1 KiB/s (121 Kibps)│││ 20579 mariadbd /usr/local/mariadb10/bin/mariadbd --basedir=/usr/loca  10 66  182M⣀⣀⣀⣀⣀ 0.0 │\n\n│ ⠈⣿⣿⣿⡿⣿⢿⡿⣿││││ 29909 Prowlarr /app/bin/Prowlarr --nobrowser --data=/config  20 1028  164M⣀⡀⣀⣀⣀ 0.0 │\n\n│ ⣿⠋⡏⡇⣿⢸⡇⣿│▲ 663 KiB/s (5.17 Mibps)│││ 29207 Sonarr /app/bin/Sonarr --nobrowser --data=/config  25 1028  148M⣀⣀⣀⣀⣀ 0.0 │\n\n│842K ⡇ ⡇⡇⢸⢸ ⠏╰─┘upload└────────────────╯││ 25596 node node ./main.cjs  11 1026  135M⣀⣀⣀⣀⣀ 0.0 ↓│\n\n╰─────────────────────────────────────────────────────────────────────────────────────────────╯╰┘↑ select ↓└┘info ↵└┘terminate└┘kill└┘signals└────────────────────────────────────────────────────────────┘0/1068└╯\n\n⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏⠏////////////////////////////////","size_bytes":7590},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, \"127.0.0.1\", () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2026},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { systemMonitor } from \"./services/systemMonitor\";\nimport { adminAuthService } from \"./services/adminAuth\";\nimport { vpsIntegration } from \"./services/vpsIntegration\";\nimport type { WebSocketMessage, SystemUpdate } from \"@shared/schema\";\nimport { insertAdminUserSchema, insertServiceSchema, insertIncidentSchema } from \"@shared/schema\";\nimport { z } from 'zod';\nimport jwt from 'jsonwebtoken';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  // Store connected clients\n  const clients = new Set<WebSocket>();\n\n  wss.on('connection', (ws) => {\n    console.log('WebSocket client connected');\n    clients.add(ws);\n\n    // Send initial data\n    sendSystemUpdate(ws);\n\n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n      clients.delete(ws);\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      clients.delete(ws);\n    });\n  });\n\n  // Broadcast updates to all connected clients\n  const broadcast = (message: WebSocketMessage) => {\n    const messageStr = JSON.stringify(message);\n    clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(messageStr);\n      }\n    });\n  };\n\n  // Send system update to a specific client or broadcast\n  const sendSystemUpdate = async (targetClient?: WebSocket) => {\n    try {\n      const metrics = await systemMonitor.getCurrentMetrics();\n      const services = await storage.getAllServices();\n      const processes = await storage.getTopProcesses(20);\n\n      if (!metrics) {\n        console.log('No metrics available yet');\n        return;\n      }\n\n      const systemUpdate: SystemUpdate = {\n        metrics,\n        services,\n        processes,\n      };\n\n      const message: WebSocketMessage = {\n        type: 'system_update',\n        data: systemUpdate,\n      };\n\n      if (targetClient) {\n        targetClient.send(JSON.stringify(message));\n      } else {\n        broadcast(message);\n      }\n    } catch (error) {\n      console.error('Error sending system update:', error);\n    }\n  };\n\n  // Send incident updates\n  const sendIncidentUpdate = async () => {\n    try {\n      const incidents = await storage.getActiveIncidents();\n      const message: WebSocketMessage = {\n        type: 'incident_update',\n        data: incidents,\n      };\n      broadcast(message);\n    } catch (error) {\n      console.error('Error sending incident update:', error);\n    }\n  };\n\n  // REST API endpoints\n  app.get('/api/services', async (req, res) => {\n    try {\n      const services = await storage.getAllServices();\n      res.json(services);\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      res.status(500).json({ error: 'Failed to fetch services' });\n    }\n  });\n\n  app.get('/api/incidents', async (req, res) => {\n    try {\n      const incidents = await storage.getAllIncidents();\n      res.json(incidents);\n    } catch (error) {\n      console.error('Error fetching incidents:', error);\n      res.status(500).json({ error: 'Failed to fetch incidents' });\n    }\n  });\n\n  app.get('/api/metrics', async (req, res) => {\n    try {\n      const metrics = await systemMonitor.getCurrentMetrics();\n      res.json(metrics);\n    } catch (error) {\n      console.error('Error fetching metrics:', error);\n      res.status(500).json({ error: 'Failed to fetch metrics' });\n    }\n  });\n\n  app.get('/api/processes', async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const processes = await storage.getTopProcesses(limit);\n      res.json(processes);\n    } catch (error) {\n      console.error('Error fetching processes:', error);\n      res.status(500).json({ error: 'Failed to fetch processes' });\n    }\n  });\n\n  // Start system monitoring and periodic updates\n  const startMonitoring = () => {\n    // Update system metrics every 2 seconds\n    setInterval(async () => {\n      await sendSystemUpdate();\n    }, 2000);\n\n    // Update incidents every 30 seconds\n    setInterval(async () => {\n      await sendIncidentUpdate();\n    }, 30000);\n\n    // Initialize system monitoring\n    systemMonitor.startMonitoring();\n  };\n\n  // Start monitoring when server starts\n  setTimeout(startMonitoring, 1000);\n\n  // Admin authentication middleware\n  const requireAuth = async (req: Request, res: Response, next: Function) => {\n    try {\n      const token = adminAuthService.extractTokenFromHeader(req.headers.authorization);\n      if (!token) {\n        return res.status(401).json({ error: 'No token provided' });\n      }\n\n      const decoded = adminAuthService.verifyToken(token);\n      if (!decoded) {\n        return res.status(401).json({ error: 'Invalid token' });\n      }\n\n      const adminUser = await storage.getAdminUser(decoded.id);\n      if (!adminUser || !adminUser.isActive) {\n        return res.status(401).json({ error: 'Admin user not found or inactive' });\n      }\n\n      (req as any).admin = adminUser;\n      next();\n    } catch (error) {\n      console.error('Authentication error:', error);\n      res.status(500).json({ error: 'Authentication failed' });\n    }\n  };\n\n  // Admin login endpoint\n  app.post('/api/admin/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      console.log('Login attempt for username:', username);\n      \n      if (!username || !password) {\n        return res.status(400).json({ error: 'Username and password required' });\n      }\n\n      const adminUser = await storage.getAdminUserByUsername(username);\n      if (!adminUser) {\n        console.log('Admin user not found:', username);\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n\n      console.log('Admin user found, verifying password...');\n      const isValidPassword = await adminAuthService.verifyPassword(password, adminUser.passwordHash);\n      if (!isValidPassword) {\n        console.log('Password verification failed for user:', username);\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n\n      if (!adminUser.isActive) {\n        console.log('Admin user is inactive:', username);\n        return res.status(401).json({ error: 'Account is inactive' });\n      }\n\n      console.log('Login successful for user:', username);\n      const token = adminAuthService.generateToken(adminUser);\n      res.json({ \n        token, \n        admin: { \n          id: adminUser.id, \n          username: adminUser.username \n        } \n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ error: 'Login failed' });\n    }\n  });\n\n  // Admin endpoints (protected)\n  app.get('/api/admin/me', requireAuth, (req, res) => {\n    const admin = (req as any).admin;\n    res.json({ \n      id: admin.id, \n      username: admin.username \n    });\n  });\n\n  // VPS connection status\n  app.get('/api/admin/vps/status', requireAuth, (req, res) => {\n    const status = vpsIntegration.getConnectionStatus();\n    res.json(status);\n  });\n\n  // Get all VPS processes and services\n  app.get('/api/admin/vps/processes', requireAuth, async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 100;\n      const processes = await vpsIntegration.getRealTimeProcesses();\n      const services = await storage.getAllServices();\n      \n      res.json({\n        processes: processes.slice(0, limit),\n        services,\n        totalProcesses: processes.length,\n        connectionActive: vpsIntegration.isConnectionActive()\n      });\n    } catch (error) {\n      console.error('Error fetching VPS processes:', error);\n      res.status(500).json({ error: 'Failed to fetch VPS processes' });\n    }\n  });\n\n  // Service management\n  app.post('/api/admin/services/:serviceName/:action', requireAuth, async (req, res) => {\n    try {\n      const { serviceName, action } = req.params;\n      \n      if (!['start', 'stop', 'restart'].includes(action)) {\n        return res.status(400).json({ error: 'Invalid action' });\n      }\n\n      const result = await vpsIntegration.manageService(serviceName, action as any);\n      \n      res.json({ \n        success: result, \n        message: result ? \n          `Service ${serviceName} ${action}ed successfully` : \n          `Failed to ${action} service ${serviceName}`\n      });\n    } catch (error) {\n      console.error('Service management error:', error);\n      res.status(500).json({ error: 'Service management failed' });\n    }\n  });\n\n  // Create service manually\n  app.post('/api/admin/services', requireAuth, async (req, res) => {\n    try {\n      const serviceData = insertServiceSchema.parse(req.body);\n      const service = await storage.createService(serviceData);\n      res.json(service);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: 'Invalid service data', details: error.errors });\n      }\n      console.error('Create service error:', error);\n      res.status(500).json({ error: 'Failed to create service' });\n    }\n  });\n\n  // Create incident\n  app.post('/api/admin/incidents', requireAuth, async (req, res) => {\n    try {\n      const incidentData = insertIncidentSchema.parse(req.body);\n      const incident = await storage.createIncident(incidentData);\n      \n      // Send incident update via WebSocket\n      await sendIncidentUpdate();\n      \n      res.json(incident);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: 'Invalid incident data', details: error.errors });\n      }\n      console.error('Create incident error:', error);\n      res.status(500).json({ error: 'Failed to create incident' });\n    }\n  });\n\n  // Update incident\n  app.patch('/api/admin/incidents/:id', requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const incident = await storage.updateIncident(id, updates);\n      if (!incident) {\n        return res.status(404).json({ error: 'Incident not found' });\n      }\n      \n      // Send incident update via WebSocket\n      await sendIncidentUpdate();\n      \n      res.json(incident);\n    } catch (error) {\n      console.error('Update incident error:', error);\n      res.status(500).json({ error: 'Failed to update incident' });\n    }\n  });\n\n  // Initialize default admin user\n  async function initializeDefaultAdmin() {\n    try {\n      const adminUsername = process.env.ADMIN_USERNAME || 'admin';\n      const existingAdmin = await storage.getAdminUserByUsername(adminUsername);\n      if (!existingAdmin) {\n        const adminData = await adminAuthService.createDefaultAdmin();\n        await storage.createAdminUser(adminData);\n        console.log(`Default admin user created with username: ${adminUsername}`);\n        console.log(`Default password: ${process.env.ADMIN_PASSWORD || 'admin123'}`);\n      } else {\n        console.log(`Admin user '${adminUsername}' already exists`);\n      }\n    } catch (error) {\n      console.error('Failed to initialize default admin:', error);\n    }\n  }\n\n  // Initialize admin user on startup\n  await initializeDefaultAdmin();\n\n  // Development endpoint to reset admin user\n  app.post('/api/admin/reset', async (req, res) => {\n    try {\n      const adminUsername = process.env.ADMIN_USERNAME || 'admin';\n      \n      // Delete existing admin if exists\n      const existingAdmin = await storage.getAdminUserByUsername(adminUsername);\n      if (existingAdmin) {\n        // Note: You would need to implement a delete method in storage\n        console.log('Existing admin found, recreating...');\n      }\n      \n      const adminData = await adminAuthService.createDefaultAdmin();\n      await storage.createAdminUser(adminData);\n      \n      res.json({ \n        message: 'Admin user reset successfully',\n        username: adminUsername,\n        password: process.env.ADMIN_PASSWORD || 'admin123'\n      });\n    } catch (error) {\n      console.error('Admin reset error:', error);\n      res.status(500).json({ error: 'Failed to reset admin user' });\n    }\n  });\n  \n  // Initialize VPS connection and discover services\n  setTimeout(async () => {\n    try {\n      console.log('Attempting to connect to VPS and discover services...');\n      if (await vpsIntegration.connect()) {\n        await vpsIntegration.discoverAndSyncServices();\n        console.log('VPS connection established and services discovered');\n      } else {\n        console.log('VPS connection failed - using simulated data');\n      }\n    } catch (error) {\n      console.error('VPS initialization failed:', error);\n    }\n  }, 2000); // Give the server time to start\n\n  return httpServer;\n}\n","size_bytes":12939},"server/storage.ts":{"content":"import type { \n  Service, InsertService, \n  Incident, InsertIncident, \n  SystemMetrics, InsertSystemMetrics, \n  Process, InsertProcess,\n  AdminUser, InsertAdminUser,\n  VpsConnection, InsertVpsConnection \n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Services\n  getAllServices(): Promise<Service[]>;\n  getService(id: string): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, service: Partial<InsertService>): Promise<Service | undefined>;\n\n  // Incidents\n  getAllIncidents(): Promise<Incident[]>;\n  getActiveIncidents(): Promise<Incident[]>;\n  createIncident(incident: InsertIncident): Promise<Incident>;\n  updateIncident(id: string, incident: Partial<InsertIncident>): Promise<Incident | undefined>;\n\n  // System Metrics\n  getLatestMetrics(): Promise<SystemMetrics | undefined>;\n  createMetrics(metrics: InsertSystemMetrics): Promise<SystemMetrics>;\n\n  // Processes\n  getTopProcesses(limit: number): Promise<Process[]>;\n  updateProcesses(processes: InsertProcess[]): Promise<Process[]>;\n\n  // Admin Users\n  getAdminUserByUsername(username: string): Promise<AdminUser | undefined>;\n  createAdminUser(adminUser: InsertAdminUser): Promise<AdminUser>;\n  getAdminUser(id: number): Promise<AdminUser | undefined>;\n\n  // VPS Connections\n  getAllVpsConnections(): Promise<VpsConnection[]>;\n  createVpsConnection(vpsConnection: InsertVpsConnection): Promise<VpsConnection>;\n  getActiveVpsConnection(): Promise<VpsConnection | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private services: Map<string, Service>;\n  private incidents: Map<string, Incident>;\n  private metrics: Map<string, SystemMetrics>;\n  private processes: Map<string, Process>;\n  private adminUsers: Map<number, AdminUser>;\n  private vpsConnections: Map<number, VpsConnection>;\n\n  constructor() {\n    this.services = new Map();\n    this.incidents = new Map();\n    this.metrics = new Map();\n    this.processes = new Map();\n    this.adminUsers = new Map();\n    this.vpsConnections = new Map();\n    this.initializeDefaults();\n  }\n\n  private initializeDefaults() {\n    // Initialize with only essential system service if no services are discovered\n    // Real services will be discovered from VPS via SSH\n    console.log('Storage initialized - waiting for VPS service discovery...');\n  }\n\n  // Services\n  async getAllServices(): Promise<Service[]> {\n    return Array.from(this.services.values());\n  }\n\n  async getService(id: string): Promise<Service | undefined> {\n    return this.services.get(id);\n  }\n\n  async createService(insertService: InsertService): Promise<Service> {\n    const id = randomUUID();\n    const service: Service = {\n      ...insertService,\n      id,\n      status: insertService.status || 'operational',\n      responseTime: insertService.responseTime || 0,\n      uptime: insertService.uptime || 100,\n      lastChecked: new Date(),\n    };\n    this.services.set(id, service);\n    return service;\n  }\n\n  async updateService(id: string, updateService: Partial<InsertService>): Promise<Service | undefined> {\n    const service = this.services.get(id);\n    if (!service) return undefined;\n\n    const updatedService: Service = {\n      ...service,\n      ...updateService,\n      lastChecked: new Date(),\n    };\n    this.services.set(id, updatedService);\n    return updatedService;\n  }\n\n  // Incidents\n  async getAllIncidents(): Promise<Incident[]> {\n    return Array.from(this.incidents.values())\n      .sort((a, b) => {\n        const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n        const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n        return dateB - dateA;\n      });\n  }\n\n  async getActiveIncidents(): Promise<Incident[]> {\n    return Array.from(this.incidents.values())\n      .filter(incident => incident.status !== 'resolved')\n      .sort((a, b) => {\n        const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n        const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n        return dateB - dateA;\n      });\n  }\n\n  async createIncident(insertIncident: InsertIncident): Promise<Incident> {\n    const id = randomUUID();\n    const incident: Incident = {\n      ...insertIncident,\n      id,\n      status: insertIncident.status || 'investigating',\n      severity: insertIncident.severity || 'minor',\n      affectedServices: insertIncident.affectedServices || [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      resolvedAt: null,\n    };\n    this.incidents.set(id, incident);\n    return incident;\n  }\n\n  async updateIncident(id: string, updateIncident: Partial<InsertIncident>): Promise<Incident | undefined> {\n    const incident = this.incidents.get(id);\n    if (!incident) return undefined;\n\n    const updatedIncident: Incident = {\n      ...incident,\n      ...updateIncident,\n      updatedAt: new Date(),\n    };\n\n    if (updateIncident.status === 'resolved' && !incident.resolvedAt) {\n      updatedIncident.resolvedAt = new Date();\n    }\n\n    this.incidents.set(id, updatedIncident);\n    return updatedIncident;\n  }\n\n  // System Metrics\n  async getLatestMetrics(): Promise<SystemMetrics | undefined> {\n    const allMetrics = Array.from(this.metrics.values());\n    return allMetrics.sort((a, b) => {\n      const dateA = a.timestamp ? new Date(a.timestamp).getTime() : 0;\n      const dateB = b.timestamp ? new Date(b.timestamp).getTime() : 0;\n      return dateB - dateA;\n    })[0];\n  }\n\n  async createMetrics(insertMetrics: InsertSystemMetrics): Promise<SystemMetrics> {\n    const id = randomUUID();\n    const metrics: SystemMetrics = {\n      ...insertMetrics,\n      id,\n      coreUsages: insertMetrics.coreUsages || [],\n      loadAverage: insertMetrics.loadAverage || [],\n      networkInterface: insertMetrics.networkInterface || 'eth0',\n      timestamp: new Date(),\n    };\n    this.metrics.set(id, metrics);\n\n    // Keep only last 1000 metrics records\n    if (this.metrics.size > 1000) {\n      const allMetrics = Array.from(this.metrics.entries());\n      allMetrics.sort((a, b) => {\n        const dateA = a[1].timestamp ? new Date(a[1].timestamp).getTime() : 0;\n        const dateB = b[1].timestamp ? new Date(b[1].timestamp).getTime() : 0;\n        return dateB - dateA;\n      });\n      \n      // Remove oldest entries\n      for (let i = 1000; i < allMetrics.length; i++) {\n        this.metrics.delete(allMetrics[i][0]);\n      }\n    }\n\n    return metrics;\n  }\n\n  // Processes\n  async getTopProcesses(limit: number): Promise<Process[]> {\n    return Array.from(this.processes.values())\n      .sort((a, b) => parseFloat(b.memory.replace(/[^0-9.]/g, '')) - parseFloat(a.memory.replace(/[^0-9.]/g, '')))\n      .slice(0, limit);\n  }\n\n  async updateProcesses(insertProcesses: InsertProcess[]): Promise<Process[]> {\n    // Clear existing processes\n    this.processes.clear();\n\n    // Add new processes\n    const processes: Process[] = insertProcesses.map(insertProcess => {\n      const id = randomUUID();\n      const process: Process = {\n        ...insertProcess,\n        id,\n        timestamp: new Date(),\n      };\n      this.processes.set(id, process);\n      return process;\n    });\n\n    return processes;\n  }\n\n  // Admin Users\n  async getAdminUserByUsername(username: string): Promise<AdminUser | undefined> {\n    return Array.from(this.adminUsers.values()).find(user => user.username === username);\n  }\n\n  async createAdminUser(insertAdminUser: InsertAdminUser): Promise<AdminUser> {\n    const id = this.adminUsers.size + 1;\n    const adminUser: AdminUser = {\n      ...insertAdminUser,\n      id,\n      isActive: insertAdminUser.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.adminUsers.set(id, adminUser);\n    return adminUser;\n  }\n\n  async getAdminUser(id: number): Promise<AdminUser | undefined> {\n    return this.adminUsers.get(id);\n  }\n\n  // VPS Connections\n  async getAllVpsConnections(): Promise<VpsConnection[]> {\n    return Array.from(this.vpsConnections.values());\n  }\n\n  async createVpsConnection(insertVpsConnection: InsertVpsConnection): Promise<VpsConnection> {\n    const id = this.vpsConnections.size + 1;\n    const vpsConnection: VpsConnection = {\n      ...insertVpsConnection,\n      id,\n      port: insertVpsConnection.port ?? 22,\n      isActive: insertVpsConnection.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.vpsConnections.set(id, vpsConnection);\n    return vpsConnection;\n  }\n\n  async getActiveVpsConnection(): Promise<VpsConnection | undefined> {\n    return Array.from(this.vpsConnections.values()).find(conn => conn.isActive);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":8667},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, real, timestamp, jsonb, boolean, serial } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  status: text(\"status\").notNull().default(\"operational\"), // operational, degraded, outage\n  responseTime: integer(\"response_time\").default(0),\n  uptime: real(\"uptime\").default(100),\n  lastChecked: timestamp(\"last_checked\").defaultNow(),\n});\n\nexport const incidents = pgTable(\"incidents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  status: text(\"status\").notNull().default(\"investigating\"), // investigating, identified, monitoring, resolved\n  severity: text(\"severity\").notNull().default(\"minor\"), // minor, major, critical\n  affectedServices: jsonb(\"affected_services\").default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  resolvedAt: timestamp(\"resolved_at\"),\n});\n\nexport const systemMetrics = pgTable(\"system_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  cpuUsage: real(\"cpu_usage\").notNull(),\n  cpuFrequency: real(\"cpu_frequency\").notNull(),\n  coreUsages: jsonb(\"core_usages\").notNull().default([]),\n  memoryTotal: real(\"memory_total\").notNull(),\n  memoryUsed: real(\"memory_used\").notNull(),\n  memoryCache: real(\"memory_cache\").notNull(),\n  memoryFree: real(\"memory_free\").notNull(),\n  networkDownload: real(\"network_download\").notNull(),\n  networkUpload: real(\"network_upload\").notNull(),\n  networkInterface: text(\"network_interface\").notNull().default(\"eth0\"),\n  loadAverage: jsonb(\"load_average\").notNull().default([]),\n  uptime: integer(\"uptime\").notNull(),\n});\n\nexport const processes = pgTable(\"processes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pid: integer(\"pid\").notNull(),\n  name: text(\"name\").notNull(),\n  command: text(\"command\").notNull(),\n  threads: integer(\"threads\").notNull(),\n  user: text(\"user\").notNull(),\n  memory: text(\"memory\").notNull(),\n  cpuUsage: real(\"cpu_usage\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertServiceSchema = createInsertSchema(services).omit({ id: true, lastChecked: true });\nexport const insertIncidentSchema = createInsertSchema(incidents).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertSystemMetricsSchema = createInsertSchema(systemMetrics).omit({ id: true, timestamp: true });\nexport const insertProcessSchema = createInsertSchema(processes).omit({ id: true, timestamp: true });\n\n// Types\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type Incident = typeof incidents.$inferSelect;\nexport type InsertIncident = z.infer<typeof insertIncidentSchema>;\nexport type SystemMetrics = typeof systemMetrics.$inferSelect;\nexport type InsertSystemMetrics = z.infer<typeof insertSystemMetricsSchema>;\nexport type Process = typeof processes.$inferSelect;\nexport type InsertProcess = z.infer<typeof insertProcessSchema>;\n\n// Admin users table for status page administration\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: serial(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 255 }).unique().notNull(),\n  passwordHash: varchar(\"password_hash\", { length: 255 }).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// VPS connections table for managing multiple servers\nexport const vpsConnections = pgTable(\"vps_connections\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  host: varchar(\"host\", { length: 255 }).notNull(),\n  port: integer(\"port\").default(22).notNull(),\n  username: varchar(\"username\", { length: 255 }).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Admin schemas and types\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertVpsConnectionSchema = createInsertSchema(vpsConnections).omit({ id: true, createdAt: true, updatedAt: true });\n\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\nexport type VpsConnection = typeof vpsConnections.$inferSelect;\nexport type InsertVpsConnection = z.infer<typeof insertVpsConnectionSchema>;\n\n// WebSocket message types\nexport interface WebSocketMessage {\n  type: 'system_update' | 'service_update' | 'incident_update' | 'process_update';\n  data: any;\n}\n\nexport interface SystemUpdate {\n  metrics: SystemMetrics;\n  services: Service[];\n  processes: Process[];\n}\n","size_bytes":5157},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport AdminLogin from \"@/pages/AdminLogin\";\nimport AdminPanel from \"@/pages/AdminPanel\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin\" component={AdminPanel} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"dark\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":966},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&family=Fira+Code:wght@300..700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220, 13%, 9%);\n  --foreground: hsl(195, 100%, 80%);\n  --card: hsl(220, 13%, 12%);\n  --card-foreground: hsl(195, 100%, 80%);\n  --popover: hsl(220, 13%, 12%);\n  --popover-foreground: hsl(195, 100%, 80%);\n  --primary: hsl(120, 100%, 70%);\n  --primary-foreground: hsl(220, 13%, 9%);\n  --secondary: hsl(45, 100%, 70%);\n  --secondary-foreground: hsl(220, 13%, 9%);\n  --muted: hsl(220, 13%, 20%);\n  --muted-foreground: hsl(220, 10%, 60%);\n  --accent: hsl(195, 100%, 70%);\n  --accent-foreground: hsl(220, 13%, 9%);\n  --destructive: hsl(0, 100%, 67%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 25%);\n  --input: hsl(220, 13%, 25%);\n  --ring: hsl(195, 100%, 70%);\n  --warning: hsl(30, 100%, 70%);\n  --radius: 0.5rem;\n  --font-mono: 'JetBrains Mono', 'Fira Code', 'Monaco', 'Consolas', monospace;\n  --font-sans: 'Inter', system-ui, sans-serif;\n}\n\n.dark {\n  --background: hsl(220, 13%, 9%);\n  --foreground: hsl(195, 100%, 80%);\n  --card: hsl(220, 13%, 12%);\n  --card-foreground: hsl(195, 100%, 80%);\n  --popover: hsl(220, 13%, 12%);\n  --popover-foreground: hsl(195, 100%, 80%);\n  --primary: hsl(120, 100%, 70%);\n  --primary-foreground: hsl(220, 13%, 9%);\n  --secondary: hsl(45, 100%, 70%);\n  --secondary-foreground: hsl(220, 13%, 9%);\n  --muted: hsl(220, 13%, 20%);\n  --muted-foreground: hsl(220, 10%, 60%);\n  --accent: hsl(195, 100%, 70%);\n  --accent-foreground: hsl(220, 13%, 9%);\n  --destructive: hsl(0, 100%, 67%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 25%);\n  --input: hsl(220, 13%, 25%);\n  --ring: hsl(195, 100%, 70%);\n  --warning: hsl(30, 100%, 70%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-mono leading-tight;\n  }\n}\n\n@layer utilities {\n  .terminal-border {\n    @apply border border-border relative;\n  }\n  \n  .terminal-border::before {\n    content: '';\n    @apply absolute -inset-px rounded-lg -z-10 opacity-30;\n    background: linear-gradient(to bottom right, hsl(var(--accent) / 0.3), transparent, hsl(var(--primary) / 0.3));\n  }\n  \n  .ascii-progress {\n    @apply font-mono whitespace-pre;\n  }\n  \n  .status-operational {\n    @apply text-primary;\n  }\n  \n  .status-degraded {\n    @apply text-warning;\n  }\n  \n  .status-outage {\n    @apply text-destructive;\n  }\n  \n  .terminal-glow {\n    @apply animate-pulse;\n    text-shadow: 0 0 5px currentColor;\n  }\n  \n  .blink {\n    animation: blink 1s infinite;\n  }\n  \n  @keyframes blink {\n    0%, 50% { opacity: 1; }\n    51%, 100% { opacity: 0; }\n  }\n  \n  .terminal-card {\n    @apply bg-card border border-border rounded-lg p-4 terminal-border overflow-hidden;\n    max-width: 100%;\n    box-sizing: border-box;\n  }\n}\n","size_bytes":2917},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/adminAuth.ts":{"content":"import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport type { AdminUser, InsertAdminUser } from '@shared/schema';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'fallback-secret-for-development';\nconst SALT_ROUNDS = 10;\n\nexport interface AdminAuthToken {\n  id: number;\n  username: string;\n  iat: number;\n  exp: number;\n}\n\nexport class AdminAuthService {\n  async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, SALT_ROUNDS);\n  }\n\n  async verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n    return bcrypt.compare(password, hashedPassword);\n  }\n\n  generateToken(adminUser: AdminUser): string {\n    const payload = {\n      id: adminUser.id,\n      username: adminUser.username,\n    };\n\n    return jwt.sign(payload, JWT_SECRET, {\n      expiresIn: '24h',\n    });\n  }\n\n  verifyToken(token: string): AdminAuthToken | null {\n    try {\n      const decoded = jwt.verify(token, JWT_SECRET) as AdminAuthToken;\n      return decoded;\n    } catch (error) {\n      console.error('JWT verification failed:', error);\n      return null;\n    }\n  }\n\n  async createDefaultAdmin(): Promise<InsertAdminUser> {\n    const adminUsername = process.env.ADMIN_USERNAME || 'admin';\n    const adminPassword = process.env.ADMIN_PASSWORD || 'admin123';\n\n    console.log('Creating default admin with username:', adminUsername);\n\n    const passwordHash = await this.hashPassword(adminPassword);\n\n    return {\n      username: adminUsername,\n      passwordHash,\n      isActive: true,\n    };\n  }\n\n  extractTokenFromHeader(authHeader?: string): string | null {\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return null;\n    }\n\n    return authHeader.substring(7);\n  }\n}\n\nexport const adminAuthService = new AdminAuthService();","size_bytes":1778},"server/services/sshClient.ts":{"content":"import { Client, ConnectConfig } from 'ssh2';\nimport type { Process, InsertProcess, Service, InsertService, SystemMetrics, InsertSystemMetrics } from '@shared/schema';\n\nexport interface SSHConnectionConfig {\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n}\n\nexport class SSHClient {\n  private conn: Client;\n  private isConnected: boolean = false;\n  private config: SSHConnectionConfig;\n\n  constructor(config: SSHConnectionConfig) {\n    this.conn = new Client();\n    this.config = config;\n  }\n\n  async connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const connectConfig: ConnectConfig = {\n        host: this.config.host,\n        port: this.config.port,\n        username: this.config.username,\n        password: this.config.password,\n        readyTimeout: 30000,\n        keepaliveInterval: 10000,\n      };\n\n      this.conn.on('ready', () => {\n        console.log(`SSH connection established to ${this.config.host}`);\n        this.isConnected = true;\n        resolve();\n      });\n\n      this.conn.on('error', (err) => {\n        console.error('SSH connection error:', err.message);\n        this.isConnected = false;\n        reject(err);\n      });\n\n      this.conn.on('close', () => {\n        console.log('SSH connection closed');\n        this.isConnected = false;\n      });\n\n      this.conn.connect(connectConfig);\n    });\n  }\n\n  async executeCommand(command: string): Promise<string> {\n    if (!this.isConnected) {\n      throw new Error('SSH connection not established');\n    }\n\n    return new Promise((resolve, reject) => {\n      this.conn.exec(command, (err, stream) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        let stdout = '';\n        let stderr = '';\n\n        stream.on('close', (code: number) => {\n          if (code !== 0 && stderr) {\n            reject(new Error(`Command failed with code ${code}: ${stderr}`));\n          } else {\n            resolve(stdout);\n          }\n        });\n\n        stream.on('data', (data: Buffer) => {\n          stdout += data.toString();\n        });\n\n        stream.stderr.on('data', (data: Buffer) => {\n          stderr += data.toString();\n        });\n      });\n    });\n  }\n\n  async getSystemMetrics(): Promise<Partial<InsertSystemMetrics>> {\n    try {\n      // Try multiple approaches for getting system info\n      let cpuUsage = 0;\n      let coreUsages: number[] = [];\n      let memInfo = {};\n      let netInfo = {};\n      let loadInfo = [0, 0, 0];\n      let uptime = 0;\n\n      // Try getting CPU usage and core count\n      try {\n        // Get overall CPU usage\n        const topResult = await this.executeCommand('top -bn1 | grep \"Cpu(s)\" | awk \\'{print $2}\\' | cut -d\\'%\\' -f1');\n        cpuUsage = parseFloat(topResult) || 0;\n\n        // Get individual core usage using multiple methods for better detection\n        try {\n          // Get actual CPU count using the methods you suggested\n          let actualCoreCount = 4; // default fallback\n          try {\n            const coreCountResult = await this.executeCommand('nproc');\n            actualCoreCount = parseInt(coreCountResult.trim()) || 4;\n            console.log(`Detected ${actualCoreCount} CPU cores (vCPUs) via nproc`);\n          } catch (e) {\n            // Try alternative method as you suggested\n            try {\n              const cpuInfoResult = await this.executeCommand('grep -c \"^processor\" /proc/cpuinfo');\n              actualCoreCount = parseInt(cpuInfoResult.trim()) || 4;\n              console.log(`Detected ${actualCoreCount} CPU cores via /proc/cpuinfo`);\n            } catch (e2) {\n              console.log('Using default 4 cores');\n            }\n          }\n          \n          // Try to get real per-core usage from /proc/stat (most reliable method)\n          try {\n            const statResult = await this.executeCommand(`head -n $((1 + ${actualCoreCount})) /proc/stat | tail -n ${actualCoreCount}`);\n            const statLines = statResult.split('\\n').filter(line => line.trim() && line.startsWith('cpu'));\n            \n            if (statLines.length > 0) {\n              coreUsages = statLines.map(line => {\n                const parts = line.split(/\\s+/);\n                if (parts.length >= 8) {\n                  const user = parseInt(parts[1]) || 0;\n                  const nice = parseInt(parts[2]) || 0;\n                  const system = parseInt(parts[3]) || 0;\n                  const idle = parseInt(parts[4]) || 0;\n                  const iowait = parseInt(parts[5]) || 0;\n                  const irq = parseInt(parts[6]) || 0;\n                  const softirq = parseInt(parts[7]) || 0;\n                  \n                  const totalIdle = idle + iowait;\n                  const totalNonIdle = user + nice + system + irq + softirq;\n                  const total = totalIdle + totalNonIdle;\n                  \n                  const usage = total > 0 ? ((totalNonIdle / total) * 100) : 0;\n                  return Math.max(0, Math.min(100, usage));\n                }\n                return 0;\n              });\n              console.log(`Got per-core usage for ${coreUsages.length} cores:`, coreUsages.map(u => u.toFixed(1) + '%'));\n            }\n          } catch (statError) {\n            console.log('Failed to get /proc/stat data:', statError);\n          }\n          \n          // If no per-core data yet, generate realistic per-core usage\n          if (coreUsages.length === 0) {\n            console.log('Generating simulated per-core data for', actualCoreCount, 'cores');\n            coreUsages = Array.from({ length: actualCoreCount }, (_, i) => {\n              // Add some realistic variance per core\n              const variance = (Math.random() - 0.5) * 20; // ±10% variance\n              const coreUsage = Math.max(0, Math.min(100, cpuUsage + variance));\n              return coreUsage;\n            });\n          }\n          \n          // Ensure we have the right number of cores\n          if (coreUsages.length !== actualCoreCount) {\n            console.log(`Core count mismatch: expected ${actualCoreCount}, got ${coreUsages.length}`);\n            coreUsages = Array.from({ length: actualCoreCount }, (_, i) => {\n              return i < coreUsages.length ? coreUsages[i] : Math.max(0, Math.min(100, cpuUsage + (Math.random() - 0.5) * 15));\n            });\n          }\n          \n        } catch (coreError) {\n          console.log('Failed to get individual core usage:', coreError);\n          // Ultimate fallback with reasonable defaults for modern VPS\n          coreUsages = Array.from({ length: 8 }, () => // Most VPS have at least 2-8 cores\n            Math.max(0, Math.min(100, cpuUsage + (Math.random() - 0.5) * 15))\n          );\n        }\n      } catch (cpuError) {\n        console.log('Unable to get CPU usage, using default');\n        cpuUsage = 25;\n        coreUsages = [25, 20, 30, 22];\n      }\n\n      // Try getting memory info with simple commands\n      try {\n        const memResult = await this.executeCommand('free -m');\n        const memLines = memResult.split('\\n').find(line => line.includes('Mem:'));\n        if (memLines) {\n          memInfo = this.parseMemoryInfo(memLines);\n        } else {\n          throw new Error('Memory info not found in free output');\n        }\n      } catch (memError) {\n        console.log('Unable to get memory metrics, using defaults');\n        memInfo = {\n          memoryTotal: 2.0,\n          memoryUsed: 1.0,\n          memoryCache: 0.3,\n          memoryFree: 0.7\n        };\n      }\n\n      // Try getting network info\n      try {\n        const netResult = await this.executeCommand('cat /proc/net/dev | tail -n +3 | head -1');\n        netInfo = this.parseNetworkInfo(netResult);\n      } catch (netError) {\n        console.log('Unable to get network metrics, using defaults');\n        netInfo = {\n          networkDownload: 1024,\n          networkUpload: 512,\n          networkInterface: 'eth0'\n        };\n      }\n\n      // Try getting load average\n      try {\n        const loadResult = await this.executeCommand('cat /proc/loadavg');\n        loadInfo = this.parseLoadAverage(`load average: ${loadResult}`);\n      } catch (loadError) {\n        console.log('Unable to get load average, using defaults');\n      }\n\n      // Try getting uptime\n      try {\n        const uptimeResult = await this.executeCommand('cat /proc/uptime');\n        uptime = Math.floor(parseFloat(uptimeResult.split(' ')[0]));\n      } catch (uptimeError) {\n        console.log('Unable to get uptime, using default');\n        uptime = 3600; // Default 1 hour\n      }\n\n      return {\n        cpuUsage,\n        cpuFrequency: 2.4, // This is a static value, may need actual fetching if required\n        coreUsages,\n        ...memInfo,\n        ...netInfo,\n        loadAverage: loadInfo,\n        uptime,\n      };\n    } catch (error) {\n      console.error('Error getting system metrics via SSH:', error);\n      return {};\n    }\n  }\n\n  async getRunningProcesses(): Promise<InsertProcess[]> {\n    try {\n      // Get processes with detailed resource usage, excluding low-level system processes\n      const result = await this.executeCommand('ps aux --sort=-%cpu,-%mem | head -50');\n\n      // Get additional process information with threads\n      let threadsInfo = '';\n      try {\n        threadsInfo = await this.executeCommand('ps -eo pid,nlwp 2>/dev/null || echo \"\"');\n      } catch (e) {\n        console.log('Unable to get thread info');\n      }\n\n      // Parse thread information into a map\n      const threadMap = new Map<string, number>();\n      if (threadsInfo) {\n        const threadLines = threadsInfo.split('\\n');\n        for (const line of threadLines) {\n          const parts = line.trim().split(/\\s+/);\n          if (parts.length >= 2 && !isNaN(parseInt(parts[0]))) {\n            threadMap.set(parts[0], parseInt(parts[1]) || 1);\n          }\n        }\n      }\n\n      // Get Docker containers if available\n      let dockerResult = '';\n      try {\n        dockerResult = await this.executeCommand('docker ps --format \"table {{.ID}}\\\\t{{.Image}}\\\\t{{.Command}}\\\\t{{.Status}}\\\\t{{.Names}}\" 2>/dev/null || echo \"No Docker\"');\n      } catch (dockerError) {\n        console.log('Docker not available or no containers running');\n      }\n\n      const lines = result.split('\\n');\n      const processes: InsertProcess[] = [];\n\n      // Filter out core system processes that users don't need to monitor\n      const systemProcessFilters = [\n        'kthreadd', 'ksoftirqd', 'migration', 'watchdog', 'systemd-', 'kworker',\n        '[', ']', // kernel threads in brackets\n        'rcu_', 'migration', 'ksoftirqd', 'watchdog', 'systemd-resolved',\n        'systemd-networkd', 'systemd-timesyncd', 'dbus-daemon'\n      ];\n\n      // Parse regular processes (skip header line)\n      for (let i = 1; i < lines.length && processes.length < 25; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n\n        const parts = line.split(/\\s+/);\n        if (parts.length < 11) continue;\n\n        const [user, pid, cpu, mem, vsz, rss, tty, stat, start, time, ...commandParts] = parts;\n        const fullCommand = commandParts.join(' ');\n        const processName = commandParts[0] || 'unknown';\n        \n        // Filter out core system processes\n        const isSystemProcess = systemProcessFilters.some(filter => \n          processName.includes(filter) || fullCommand.includes(filter)\n        );\n        \n        if (isSystemProcess) continue;\n        \n        // Skip if CPU and memory usage are both very low (likely idle system processes)\n        const cpuUsage = parseFloat(cpu) || 0;\n        const memUsage = parseFloat(mem) || 0;\n        if (cpuUsage < 0.1 && memUsage < 0.1 && user === 'root') continue;\n\n        // Convert RSS (in KB) to human readable format\n        const rssKB = parseInt(rss) || 0;\n        let memoryDisplay = '';\n        if (rssKB > 1024 * 1024) {\n          memoryDisplay = `${(rssKB / (1024 * 1024)).toFixed(1)}GB`;\n        } else if (rssKB > 1024) {\n          memoryDisplay = `${(rssKB / 1024).toFixed(0)}MB`;\n        } else {\n          memoryDisplay = `${rssKB}KB`;\n        }\n\n        processes.push({\n          pid: parseInt(pid),\n          name: processName,\n          command: fullCommand.length > 60 ? fullCommand.substring(0, 57) + '...' : fullCommand,\n          threads: threadMap.get(pid) || 1,\n          user: user,\n          memory: memoryDisplay,\n          cpuUsage: cpuUsage,\n        });\n      }\n\n      // Parse Docker containers if available with actual resource usage\n      if (dockerResult && !dockerResult.includes('No Docker')) {\n        try {\n          // Get Docker container stats for resource usage\n          const dockerStats = await this.executeCommand('docker stats --no-stream --format \"table {{.Container}}\\\\t{{.CPUPerc}}\\\\t{{.MemUsage}}\\\\t{{.MemPerc}}\" 2>/dev/null || echo \"No stats\"');\n          const statsMap = new Map<string, {cpu: string, mem: string, memPerc: string}>();\n          \n          if (dockerStats && !dockerStats.includes('No stats')) {\n            const statsLines = dockerStats.split('\\n');\n            for (let i = 1; i < statsLines.length; i++) {\n              const line = statsLines[i].trim();\n              if (!line) continue;\n              const parts = line.split('\\t');\n              if (parts.length >= 4) {\n                const [container, cpu, mem, memPerc] = parts;\n                statsMap.set(container, {cpu, mem, memPerc});\n              }\n            }\n          }\n\n          const dockerLines = dockerResult.split('\\n');\n          for (let i = 1; i < dockerLines.length && processes.length < 30; i++) {\n            const line = dockerLines[i].trim();\n            if (!line) continue;\n\n            const parts = line.split('\\t');\n            if (parts.length >= 5) {\n              const [id, image, command, status, names] = parts;\n              const stats = statsMap.get(names) || {cpu: '0.0%', mem: '0B / 0B', memPerc: '0.0%'};\n\n              processes.push({\n                pid: parseInt(id.slice(0, 8), 16) || Math.floor(Math.random() * 99999),\n                name: `🐳${names}`,\n                command: `${image} ${command}`.length > 50 ? `${image} ${command}`.substring(0, 47) + '...' : `${image} ${command}`,\n                threads: 1,\n                user: 'docker',\n                memory: stats.mem.split(' / ')[0] || '0B',\n                cpuUsage: parseFloat(stats.cpu.replace('%', '')) || 0,\n              });\n            }\n          }\n        } catch (dockerError) {\n          console.log('Failed to get Docker stats:', dockerError);\n        }\n      }\n\n      // Sort by resource usage (CPU + memory impact)\n      processes.sort((a, b) => {\n        const scoreA = a.cpuUsage + (parseFloat(a.memory.replace(/[^0-9.]/g, '')) || 0) * 0.1;\n        const scoreB = b.cpuUsage + (parseFloat(b.memory.replace(/[^0-9.]/g, '')) || 0) * 0.1;\n        return scoreB - scoreA;\n      });\n\n      console.log(`Found ${processes.length} user processes/containers`);\n      return processes.slice(0, 20); // Limit to top 20 processes\n    } catch (error) {\n      console.error('Error getting processes via SSH:', error);\n      return [];\n    }\n  }\n\n  async discoverServices(): Promise<InsertService[]> {\n    try {\n      const services: InsertService[] = [];\n\n      // Discover systemd services\n      try {\n        // Command to list active running services, filtering for .service units.\n        const result = await this.executeCommand('systemctl list-units --type=service --state=active --no-pager | grep -E \"\\\\.(service)\\\\s+loaded\\\\s+active\\\\s+running\"');\n        const lines = result.split('\\n');\n\n        for (const line of lines) {\n          const trimmedLine = line.trim();\n          if (!trimmedLine) continue;\n\n          const parts = trimmedLine.split(/\\s+/);\n          if (parts.length < 4) continue; // Expecting at least service name, load state, active state, and running state\n\n          const serviceName = parts[0].replace('.service', ''); // Extract service name without extension\n\n          // Filter out only core low-level system services, keep important services like SSH, nginx, apache, etc.\n          const systemServices = ['systemd', 'dbus', 'networkd', 'resolved', 'logind', 'udev'];\n          if (systemServices.some(sys => serviceName.includes(sys))) {\n            continue;\n          }\n\n          services.push({\n            name: serviceName,\n            status: 'operational', // Assuming active running services are operational\n            responseTime: Math.floor(Math.random() * 50) + 10, // Simulated response time\n            uptime: Math.random() * 5 + 95, // High uptime for operational services (95-100%)\n          });\n        }\n      } catch (error) {\n        console.log('Failed to discover systemd services:', error);\n      }\n\n      // Discover Docker containers (for general monitoring)\n      try {\n        // List all running Docker containers with their names, images, and status.\n        const dockerResult = await this.executeCommand('docker ps --format \"{{.Names}}\\\\t{{.Image}}\\\\t{{.Status}}\" 2>/dev/null');\n        const dockerLines = dockerResult.split('\\n');\n\n        for (const line of dockerLines) {\n          const trimmedLine = line.trim();\n          if (!trimmedLine) continue;\n\n          const parts = trimmedLine.split('\\t');\n          if (parts.length >= 3) { // Ensure we have name, image, and status\n            const [name, image, status] = parts;\n\n            const isRunning = status.includes('Up'); // Check if status indicates the container is running\n\n            services.push({\n              name: `Docker: ${name}`,\n              status: isRunning ? 'operational' : 'outage', // Set status based on running state\n              responseTime: isRunning ? Math.floor(Math.random() * 30) + 15 : null, // Simulate response time for running containers\n              uptime: isRunning ? Math.random() * 3 + 97 : Math.random() * 10 + 0, // High uptime for running containers, low for stopped\n            });\n          }\n        }\n      } catch (error) {\n        console.log('Docker not available or no containers found');\n      }\n\n      // Discover Coolify specific services (containers managed by Coolify)\n      try {\n        // Filter Docker containers that are specifically managed by Coolify using a label.\n        const coolifyResult = await this.executeCommand('docker ps --filter \"label=coolify.managed=true\" --format \"{{.Names}}\\\\t{{.Image}}\\\\t{{.Status}}\" 2>/dev/null');\n        const coolifyLines = coolifyResult.split('\\n');\n\n        for (const line of coolifyLines) {\n          const trimmedLine = line.trim();\n          if (!trimmedLine) continue;\n\n          const parts = trimmedLine.split('\\t');\n          if (parts.length >= 3) { // Ensure we have name, image, and status\n            const [name, image, status] = parts;\n\n            const isRunning = status.includes('Up'); // Check if container is running\n\n            services.push({\n              name: `Coolify: ${name}`,\n              status: isRunning ? 'operational' : 'outage', // Set status based on running state\n              responseTime: isRunning ? Math.floor(Math.random() * 40) + 20 : null, // Simulate response time for Coolify services\n              uptime: isRunning ? Math.random() * 3 + 97 : Math.random() * 15 + 0, // Realistic uptime based on status\n            });\n          }\n        }\n      } catch (error) {\n        console.log('No Coolify managed containers found');\n      }\n\n      return services;\n    } catch (error) {\n      console.error('Error discovering services via SSH:', error);\n      return [];\n    }\n  }\n\n\n  // Helper methods for parsing command outputs\n  // Parses CPU usage, but the getSystemMetrics now uses a more direct approach for core usage.\n  private parseCpuUsage(result: string): number {\n    try {\n      const lines = result.split('\\n');\n      if (lines.length < 2) return 0;\n\n      // Example parsing logic (may need adjustment based on actual 'top' output format)\n      const userCpu = parseFloat(lines[0].split(' ')[2]); // User CPU time\n      const totalCpu = parseFloat(lines[0].split(' ')[1]) + parseFloat(lines[0].split(' ')[3]); // Sum of user and system CPU time\n      const idleCpu = parseFloat(lines[1].split(' ')[4]); // Idle CPU time\n\n      // Calculate CPU usage percentage. This logic might be overly simplistic depending on 'top' output.\n      return Math.max(0, Math.min(100, 100 - (idleCpu * 100 / (userCpu + totalCpu)))) || 0;\n    } catch (e) {\n      console.error(\"Error parsing CPU usage:\", e);\n      return 0;\n    }\n  }\n\n  // Parses memory information from 'free -m' command output.\n  private parseMemoryInfo(result: string): { memoryTotal: number, memoryUsed: number, memoryCache: number, memoryFree: number } {\n    try {\n      // Parse the Mem: line from free -m output\n      // Format: Mem:     total      used      free    shared  buff/cache   available\n      const memParts = result.trim().split(/\\s+/);\n      \n      if (memParts.length < 7) {\n        console.log('Unexpected free -m format:', result);\n        return { memoryTotal: 0, memoryUsed: 0, memoryCache: 0, memoryFree: 0 };\n      }\n\n      const total = parseInt(memParts[1]); // Total memory\n      const used = parseInt(memParts[2]); // Used memory  \n      const free = parseInt(memParts[3]); // Free memory\n      const cache = parseInt(memParts[5]) || 0; // Buffer/cache\n      const available = parseInt(memParts[6]) || free; // Available memory\n\n      // Convert MB to GB for consistency.\n      return {\n        memoryTotal: total / 1024,\n        memoryUsed: used / 1024,\n        memoryCache: cache / 1024,\n        memoryFree: available / 1024, // Use available memory instead of just free\n      };\n    } catch (e) {\n      console.error(\"Error parsing memory info:\", e);\n      return { memoryTotal: 0, memoryUsed: 0, memoryCache: 0, memoryFree: 0 };\n    }\n  }\n\n  // Parses network interface statistics from '/proc/net/dev'.\n  private parseNetworkInfo(result: string): { networkDownload: number, networkUpload: number, networkInterface: string } {\n    try {\n      const parts = result.trim().split(/\\s+/);\n      // Expected parts: interface, receive bytes, receive packets, etc., transmit bytes.\n      if (parts.length < 10) return { networkDownload: 0, networkUpload: 0, networkInterface: 'unknown' };\n\n      const interfaceName = parts[0].replace(':', ''); // Interface name is the first part, remove trailing colon.\n      const receiveBytes = parseInt(parts[1]); // Received bytes.\n      const transmitBytes = parseInt(parts[9]); // Transmitted bytes.\n\n      // Convert bytes to MB for download and upload speeds.\n      return {\n        networkDownload: receiveBytes / (1024 * 1024),\n        networkUpload: transmitBytes / (1024 * 1024),\n        networkInterface: interfaceName,\n      };\n    } catch (e) {\n      console.error(\"Error parsing network info:\", e);\n      return { networkDownload: 0, networkUpload: 0, networkInterface: 'unknown' };\n    }\n  }\n\n  // Parses load average from '/proc/loadavg'.\n  private parseLoadAverage(result: string): number[] {\n    try {\n      // Extract the load average numbers, separated by commas or spaces.\n      const loadAverages = result.replace('load average:', '').trim().split(/[\\s,]+/).map(v => parseFloat(v.trim()));\n      // Filter out any NaN values that might result from parsing.\n      return loadAverages.filter(v => !isNaN(v));\n    } catch (e) {\n      console.error(\"Error parsing load average:\", e);\n      return [0, 0, 0]; // Return defaults if parsing fails.\n    }\n  }\n\n\n  // Restarts a given systemd service.\n  async restartService(serviceName: string): Promise<boolean> {\n    try {\n      await this.executeCommand(`sudo systemctl restart ${serviceName}`); // Use sudo for restart command.\n      console.log(`Service ${serviceName} restarted successfully`);\n      return true;\n    } catch (error) {\n      console.error(`Failed to restart service ${serviceName}:`, error);\n      return false;\n    }\n  }\n\n  // Stops a given systemd service.\n  async stopService(serviceName: string): Promise<boolean> {\n    try {\n      await this.executeCommand(`sudo systemctl stop ${serviceName}`); // Use sudo for stop command.\n      console.log(`Service ${serviceName} stopped successfully`);\n      return true;\n    } catch (error) {\n      console.error(`Failed to stop service ${serviceName}:`, error);\n      return false;\n    }\n  }\n\n  // Starts a given systemd service.\n  async startService(serviceName: string): Promise<boolean> {\n    try {\n      await this.executeCommand(`sudo systemctl start ${serviceName}`); // Use sudo for start command.\n      console.log(`Service ${serviceName} started successfully`);\n      return true;\n    } catch (error) {\n      console.error(`Failed to start service ${serviceName}:`, error);\n      return false;\n    }\n  }\n\n  // Closes the SSH connection.\n  disconnect(): void {\n    if (this.conn) {\n      this.conn.end(); // End the connection.\n      this.isConnected = false;\n    }\n  }\n\n  // Checks if the SSH connection is currently active.\n  isConnectionActive(): boolean {\n    return this.isConnected;\n  }\n}","size_bytes":25023},"server/services/systemMonitor.ts":{"content":"import { storage } from \"../storage\";\nimport { vpsIntegration } from \"./vpsIntegration\";\nimport type { InsertSystemMetrics, InsertProcess, SystemMetrics } from \"@shared/schema\";\n\nclass SystemMonitor {\n  private isMonitoring = false;\n  \n  async getCurrentMetrics(): Promise<SystemMetrics | undefined> {\n    // Try to get real metrics from VPS first\n    if (vpsIntegration.isConnectionActive()) {\n      const realMetrics = await vpsIntegration.getRealTimeMetrics();\n      if (realMetrics) {\n        return realMetrics;\n      }\n    }\n    \n    // Fallback to stored metrics\n    return storage.getLatestMetrics();\n  }\n\n  startMonitoring() {\n    if (this.isMonitoring) return;\n    \n    this.isMonitoring = true;\n    console.log('System monitoring started');\n    \n    // Generate initial system state\n    this.generateSystemData();\n    \n    // Update system metrics every 5 seconds (reduced frequency for VPS calls)\n    setInterval(() => {\n      this.generateSystemData();\n    }, 5000);\n\n    // Update service status every 5 seconds\n    setInterval(() => {\n      this.updateServiceStatus();\n    }, 5000);\n  }\n\n  private async generateSystemData() {\n    // Try to get real data from VPS first\n    if (vpsIntegration.isConnectionActive()) {\n      try {\n        // Get real metrics and processes from VPS\n        await vpsIntegration.getRealTimeMetrics();\n        await vpsIntegration.getRealTimeProcesses();\n        return;\n      } catch (error) {\n        console.log('Failed to get real VPS data, using fallback simulation');\n      }\n    }\n    \n    // Fallback to simulation only if VPS is not available\n    await this.generateSimulatedData();\n  }\n\n  private async generateSimulatedData() {\n    const now = Date.now();\n    const baseTime = Math.floor(now / 10000) * 10000;\n\n    const cpuBase = 15 + Math.sin(baseTime / 100000) * 10;\n    const cpuNoise = (Math.random() - 0.5) * 5;\n    const cpuUsage = Math.max(5, Math.min(95, cpuBase + cpuNoise));\n\n    const coreCount = 4; // More realistic for VPS\n    const coreUsages = Array.from({ length: coreCount }, () => {\n      const coreBase = cpuUsage + (Math.random() - 0.5) * 20;\n      return Math.max(0, Math.min(100, coreBase));\n    });\n\n    const memoryTotal = 2.0; // 2 GB - more realistic for VPS\n    const memoryUsedBase = 1.2 + Math.sin(baseTime / 200000) * 0.3;\n    const memoryCacheBase = 0.5 + Math.sin(baseTime / 150000) * 0.1;\n    const memoryUsed = Math.max(0.8, Math.min(1.8, memoryUsedBase));\n    const memoryCache = Math.max(0.2, Math.min(0.8, memoryCacheBase));\n    const memoryFree = memoryTotal - memoryUsed - memoryCache;\n\n    const networkDownloadBase = 5 + Math.random() * 20;\n    const networkUploadBase = 10 + Math.random() * 30;\n\n    const loadAverage = [\n      0.5 + Math.random() * 0.3,\n      0.4 + Math.random() * 0.2,\n      0.3 + Math.random() * 0.1\n    ];\n\n    const metrics: InsertSystemMetrics = {\n      cpuUsage,\n      cpuFrequency: 2.4 + Math.random() * 0.4,\n      coreUsages,\n      memoryTotal,\n      memoryUsed,\n      memoryCache,\n      memoryFree,\n      networkDownload: networkDownloadBase * 1024,\n      networkUpload: networkUploadBase * 1024,\n      networkInterface: 'eth0',\n      loadAverage,\n      uptime: Math.floor(now / 1000),\n    };\n\n    // Only simulate basic system processes if VPS not available\n    const basicProcesses: InsertProcess[] = [\n      {\n        pid: 1,\n        name: 'systemd',\n        command: '/sbin/init',\n        threads: 1,\n        user: 'root',\n        memory: '1.2%',\n        cpuUsage: 0.0,\n      },\n      {\n        pid: 123,\n        name: 'sshd',\n        command: '/usr/sbin/sshd -D',\n        threads: 1,\n        user: 'root',\n        memory: '0.5%',\n        cpuUsage: 0.1,\n      },\n    ];\n\n    await storage.createMetrics(metrics);\n    await storage.updateProcesses(basicProcesses);\n  }\n\n  private async updateServiceStatus() {\n    // Try to discover real services from VPS\n    if (vpsIntegration.isConnectionActive()) {\n      try {\n        await vpsIntegration.discoverAndSyncServices();\n        return;\n      } catch (error) {\n        console.log('Failed to discover VPS services');\n      }\n    }\n\n    // Update existing service response times\n    const services = await storage.getAllServices();\n    for (const service of services) {\n      const variation = (Math.random() - 0.5) * 10;\n      const currentResponseTime = service.responseTime || 50;\n      const newResponseTime = Math.max(5, currentResponseTime + variation);\n      \n      await storage.updateService(service.id, {\n        responseTime: Math.floor(newResponseTime),\n      });\n    }\n  }\n}\n\nexport const systemMonitor = new SystemMonitor();","size_bytes":4616},"server/services/vpsIntegration.ts":{"content":"import { SSHClient, SSHConnectionConfig } from './sshClient';\nimport { storage } from '../storage';\nimport type { SystemMetrics, Process } from '@shared/schema';\n\nexport class VPSIntegration {\n  private sshClient: SSHClient | null = null;\n  private isConnected = false;\n  private connectionConfig: SSHConnectionConfig | null = null;\n\n  constructor() {\n    this.initializeConnection();\n  }\n\n  private async initializeConnection() {\n    try {\n      // Get connection details from environment variables\n      const host = process.env.VPS_HOST;\n      const username = process.env.VPS_USERNAME;\n      const password = process.env.VPS_PASSWORD;\n      const port = parseInt(process.env.VPS_PORT || '22');\n\n      if (!host || !username || !password) {\n        console.log('VPS connection credentials not configured, using mock data');\n        return;\n      }\n\n      this.connectionConfig = { host, username, password, port };\n      \n      // Create VPS connection record in storage if not exists\n      const existingConnection = await storage.getActiveVpsConnection();\n      if (!existingConnection) {\n        await storage.createVpsConnection({\n          name: 'Primary VPS',\n          host,\n          port,\n          username,\n          isActive: true,\n        });\n      }\n\n      await this.connect();\n    } catch (error) {\n      console.error('Failed to initialize VPS connection:', error);\n    }\n  }\n\n  async connect(): Promise<boolean> {\n    if (!this.connectionConfig) {\n      console.log('No VPS connection configuration available');\n      return false;\n    }\n\n    try {\n      this.sshClient = new SSHClient(this.connectionConfig);\n      await this.sshClient.connect();\n      this.isConnected = true;\n      console.log('VPS connection established successfully');\n\n      // Discover services on initial connection\n      await this.discoverAndSyncServices();\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to connect to VPS:', error);\n      this.isConnected = false;\n      return false;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.sshClient) {\n      this.sshClient.disconnect();\n      this.sshClient = null;\n      this.isConnected = false;\n      console.log('VPS connection closed');\n    }\n  }\n\n  async getRealTimeMetrics(): Promise<SystemMetrics | null> {\n    if (!this.isConnected || !this.sshClient) {\n      return null;\n    }\n\n    try {\n      const metricsData = await this.sshClient.getSystemMetrics();\n      if (Object.keys(metricsData).length === 0) {\n        return null;\n      }\n\n      const metrics = await storage.createMetrics(metricsData as any);\n      return metrics;\n    } catch (error) {\n      console.error('Error getting real-time metrics from VPS:', error);\n      \n      // Try to reconnect if connection seems broken\n      if (error.message.includes('Channel open failure')) {\n        console.log('SSH channel failure detected, attempting reconnection...');\n        try {\n          await this.reconnect();\n        } catch (reconnectError) {\n          console.error('Reconnection failed:', reconnectError);\n        }\n      }\n      \n      return null;\n    }\n  }\n\n  async getRealTimeProcesses(): Promise<Process[]> {\n    if (!this.isConnected || !this.sshClient) {\n      return [];\n    }\n\n    try {\n      const processData = await this.sshClient.getRunningProcesses();\n      const processes = await storage.updateProcesses(processData);\n      return processes;\n    } catch (error) {\n      console.error('Error getting real-time processes from VPS:', error);\n      \n      // Try to reconnect if connection seems broken\n      if (error.message.includes('Channel open failure')) {\n        console.log('SSH channel failure detected, attempting reconnection...');\n        try {\n          await this.reconnect();\n        } catch (reconnectError) {\n          console.error('Reconnection failed:', reconnectError);\n        }\n      }\n      \n      return [];\n    }\n  }\n\n  private async reconnect(): Promise<void> {\n    console.log('Attempting to reconnect to VPS...');\n    await this.disconnect();\n    await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\n    await this.connect();\n  }\n\n  async discoverAndSyncServices(): Promise<void> {\n    if (!this.isConnected || !this.sshClient) {\n      return;\n    }\n\n    try {\n      const discoveredServices = await this.sshClient.discoverServices();\n      console.log(`Discovered ${discoveredServices.length} services from VPS`);\n\n      // Add discovered services to storage if they don't exist\n      const existingServices = await storage.getAllServices();\n      const existingServiceNames = new Set(existingServices.map(s => s.name));\n\n      for (const service of discoveredServices) {\n        if (!existingServiceNames.has(service.name)) {\n          await storage.createService(service);\n          console.log(`Added new service: ${service.name}`);\n        }\n      }\n    } catch (error) {\n      console.error('Error discovering services from VPS:', error);\n    }\n  }\n\n  async manageService(serviceName: string, action: 'start' | 'stop' | 'restart'): Promise<boolean> {\n    if (!this.isConnected || !this.sshClient) {\n      throw new Error('VPS connection not available');\n    }\n\n    try {\n      let result = false;\n      \n      switch (action) {\n        case 'start':\n          result = await this.sshClient.startService(serviceName);\n          break;\n        case 'stop':\n          result = await this.sshClient.stopService(serviceName);\n          break;\n        case 'restart':\n          result = await this.sshClient.restartService(serviceName);\n          break;\n      }\n\n      if (result) {\n        // Update service status in storage\n        const services = await storage.getAllServices();\n        const service = services.find(s => s.name.toLowerCase().includes(serviceName.toLowerCase()));\n        \n        if (service) {\n          const newStatus = action === 'stop' ? 'outage' : 'operational';\n          await storage.updateService(service.id, { status: newStatus });\n        }\n      }\n\n      return result;\n    } catch (error) {\n      console.error(`Error managing service ${serviceName} (${action}):`, error);\n      return false;\n    }\n  }\n\n  isConnectionActive(): boolean {\n    return this.isConnected && this.sshClient?.isConnectionActive() === true;\n  }\n\n  getConnectionStatus(): { connected: boolean; host?: string; port?: number } {\n    return {\n      connected: this.isConnected,\n      host: this.connectionConfig?.host,\n      port: this.connectionConfig?.port,\n    };\n  }\n}\n\nexport const vpsIntegration = new VPSIntegration();","size_bytes":6561},"client/src/components/IncidentHistory.tsx":{"content":"import type { Incident } from \"@shared/schema\";\n\ninterface IncidentHistoryProps {\n  incidents: Incident[];\n}\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'resolved': return 'status-operational';\n    case 'investigating': return 'status-degraded';\n    case 'identified': return 'status-degraded';\n    case 'monitoring': return 'status-degraded';\n    default: return 'text-muted-foreground';\n  }\n};\n\nconst getSeverityIcon = (severity: string) => {\n  switch (severity) {\n    case 'critical': return '🔴';\n    case 'major': return '⚠️';\n    case 'minor': return '🟡';\n    default: return '●';\n  }\n};\n\nconst formatTimeAgo = (date: Date | string) => {\n  const now = new Date();\n  const then = new Date(date);\n  const diffMs = now.getTime() - then.getTime();\n  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n  const diffDays = Math.floor(diffHours / 24);\n\n  if (diffDays > 0) {\n    return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n  }\n  if (diffHours > 0) {\n    return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n  }\n  return 'Just now';\n};\n\nexport default function IncidentHistory({ incidents }: IncidentHistoryProps) {\n  const activeIncidents = incidents.filter(i => i.status !== 'resolved');\n  const recentIncidents = incidents.filter(i => i.status === 'resolved').slice(0, 5);\n\n  return (\n    <section className=\"terminal-card\" data-testid=\"incident-history\">\n      <h2 className=\"text-lg font-bold text-primary mb-4 overflow-hidden\">\n        <div className=\"w-full overflow-hidden\">\n          <span className=\"hidden lg:inline-block\">╭─┐³incidents┌─────────────────────────────────────────────────────╮</span>\n          <span className=\"hidden md:inline-block lg:hidden\">╭─┐³incidents┌──────────────────╮</span>\n          <span className=\"md:hidden\">╭─┐³incidents┌────╮</span>\n        </div>\n      </h2>\n      \n      {/* Current Incidents */}\n      {activeIncidents.map((incident) => (\n        <div key={incident.id} className=\"bg-muted border border-warning rounded p-4 mb-4\" data-testid={`active-incident-${incident.id}`}>\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-warning font-semibold text-sm flex items-center gap-2\">\n              {getSeverityIcon(incident.severity)} {incident.status.toUpperCase()}\n            </span>\n            <span className=\"text-xs text-muted-foreground\" data-testid={`incident-time-${incident.id}`}>\n              {incident.createdAt ? formatTimeAgo(incident.createdAt) : 'Unknown'}\n            </span>\n          </div>\n          <h3 className=\"text-sm font-semibold text-foreground mb-2\" data-testid={`incident-title-${incident.id}`}>\n            {incident.title}\n          </h3>\n          <p className=\"text-xs text-muted-foreground mb-2\" data-testid={`incident-description-${incident.id}`}>\n            {incident.description}\n          </p>\n          <div className=\"text-xs text-warning\">\n            Affected: {Array.isArray(incident.affectedServices) ? \n              (incident.affectedServices as string[]).join(', ') : \n              'Multiple Services'} • Status: {incident.status}\n          </div>\n        </div>\n      ))}\n      \n      {/* Recent Incidents */}\n      <div className=\"space-y-3\">\n        <h3 className=\"text-sm font-semibold text-foreground border-b border-border pb-1\">Recent Incidents</h3>\n        \n        {recentIncidents.length === 0 ? (\n          <div className=\"text-xs text-muted-foreground text-center py-4\">\n            No recent incidents to display\n          </div>\n        ) : (\n          recentIncidents.map((incident) => (\n            <div key={incident.id} className=\"flex items-start space-x-3 text-xs\" data-testid={`recent-incident-${incident.id}`}>\n              <span className={`${getStatusColor(incident.status)} mt-1`}>●</span>\n              <div className=\"flex-1\">\n                <div className=\"flex justify-between items-start\">\n                  <span className=\"text-foreground font-medium\" data-testid={`recent-incident-title-${incident.id}`}>\n                    {incident.title}\n                  </span>\n                  <span className=\"text-muted-foreground\" data-testid={`recent-incident-date-${incident.id}`}>\n                    {incident.createdAt ? new Date(incident.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) : 'Unknown'}\n                  </span>\n                </div>\n                <div className=\"text-muted-foreground mt-1\" data-testid={`recent-incident-summary-${incident.id}`}>\n                  {incident.description.length > 60 ? \n                    incident.description.substring(0, 60) + '...' : \n                    incident.description}\n                </div>\n                <div className=\"text-primary mt-1\">\n                  Duration: <span data-testid={`recent-incident-duration-${incident.id}`}>\n                    {incident.resolvedAt && incident.createdAt ? \n                      Math.round((new Date(incident.resolvedAt).getTime() - new Date(incident.createdAt).getTime()) / 60000) + ' minutes' :\n                      'Ongoing'\n                    }\n                  </span> • \n                  Impact: <span data-testid={`recent-incident-impact-${incident.id}`}>\n                    {incident.severity}\n                  </span>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n      \n      <div className=\"text-right text-xs text-muted-foreground mt-4 overflow-hidden\">\n        <div className=\"w-full overflow-hidden\">\n          <span className=\"hidden lg:inline-block\">╰─────────────────────────────────────────────────────────────────╯</span>\n          <span className=\"hidden md:inline-block lg:hidden\">╰────────────────────────────╯</span>\n          <span className=\"md:hidden\">╰──────────╯</span>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6297},"client/src/components/NotificationFooter.tsx":{"content":"export default function NotificationFooter() {\n  const handleSubscribeEmail = () => {\n    // TODO: Implement email subscription\n    console.log('Email subscription requested');\n  };\n\n  const handleViewApiDocs = () => {\n    // TODO: Open API documentation\n    console.log('API documentation requested');\n  };\n\n  const handleViewFeeds = () => {\n    // TODO: Show RSS/social feeds\n    console.log('Feeds requested');\n  };\n\n  return (\n    <section className=\"terminal-card\" data-testid=\"notification-footer\">\n      <h2 className=\"text-lg font-bold text-primary mb-4\">\n        <div className=\"w-full overflow-hidden\">\n          <span className=\"hidden lg:inline-block\">╭─┐⁵notifications┌─────────────────────────────────────────────────────────────────────────────────────────────────╮</span>\n          <span className=\"hidden md:inline-block lg:hidden\">╭─┐⁵notifications┌─────────────────────────────────────╮</span>\n          <span className=\"md:hidden\">╭─┐⁵notifications┌────╮</span>\n        </div>\n      </h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <div className=\"space-y-3\">\n          <h3 className=\"text-sm font-semibold text-foreground\">Email Alerts</h3>\n          <div className=\"text-xs text-muted-foreground space-y-1\">\n            <div>• Incident creation and updates</div>\n            <div>• Service outage notifications</div>\n            <div>• Maintenance announcements</div>\n          </div>\n          <button \n            onClick={handleSubscribeEmail}\n            className=\"w-full bg-primary text-primary-foreground px-3 py-2 rounded text-xs font-medium hover:bg-primary/80 transition-colors\"\n            data-testid=\"button-subscribe-email\"\n          >\n            Subscribe to Updates\n          </button>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <h3 className=\"text-sm font-semibold text-foreground\">API Integration</h3>\n          <div className=\"text-xs text-muted-foreground space-y-1\">\n            <div>• Webhook notifications</div>\n            <div>• Real-time status API</div>\n            <div>• JSON feed access</div>\n          </div>\n          <button \n            onClick={handleViewApiDocs}\n            className=\"w-full bg-secondary text-secondary-foreground px-3 py-2 rounded text-xs font-medium hover:bg-secondary/80 transition-colors\"\n            data-testid=\"button-view-api\"\n          >\n            View API Documentation\n          </button>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <h3 className=\"text-sm font-semibold text-foreground\">RSS & Social</h3>\n          <div className=\"text-xs text-muted-foreground space-y-1\">\n            <div>• RSS/Atom feeds</div>\n            <div>• Twitter updates</div>\n            <div>• Discord notifications</div>\n          </div>\n          <button \n            onClick={handleViewFeeds}\n            className=\"w-full bg-accent text-accent-foreground px-3 py-2 rounded text-xs font-medium hover:bg-accent/80 transition-colors\"\n            data-testid=\"button-view-feeds\"\n          >\n            Access Feeds\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"text-right text-xs text-muted-foreground mt-4\">\n        <div className=\"w-full overflow-hidden\">\n          <span className=\"hidden lg:inline-block\">╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n          <span className=\"hidden md:inline-block lg:hidden\">╰───────────────────────────────────────────╯</span>\n          <span className=\"md:hidden\">╰──────────────╯</span>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4343},"client/src/components/ResourceMonitoring.tsx":{"content":"import type { SystemMetrics } from \"@shared/schema\";\n\ninterface ResourceMonitoringProps {\n  systemMetrics: SystemMetrics | null;\n}\n\nconst generateProgressBar = (percentage: number, maxWidth: number = 50) => {\n  const clampedPercentage = Math.min(100, Math.max(0, percentage));\n  const filledBars = Math.round((clampedPercentage / 100) * maxWidth);\n  return '█'.repeat(filledBars) + '░'.repeat(maxWidth - filledBars);\n};\n\nconst generateResponsiveProgressBar = (percentage: number) => {\n  const clampedPercentage = Math.min(100, Math.max(0, percentage));\n  const maxWidth = 20; // Responsive width for smaller screens\n  const filledBars = Math.round((clampedPercentage / 100) * maxWidth);\n  return '█'.repeat(filledBars) + '░'.repeat(maxWidth - filledBars);\n};\n\nconst formatBytes = (bytes: number) => {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KiB', 'MiB', 'GiB', 'TiB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(1))} ${sizes[i]}`;\n};\n\nexport default function ResourceMonitoring({ systemMetrics }: ResourceMonitoringProps) {\n  if (!systemMetrics) {\n    return (\n      <section className=\"terminal-card\" data-testid=\"resource-monitoring\">\n        <h2 className=\"text-lg font-bold text-primary mb-4 overflow-hidden\">\n          <div className=\"w-full overflow-hidden\">\n            <span className=\"hidden lg:inline-block\">╭─┐²resources┌──────────────────────────────────╮</span>\n            <span className=\"hidden md:inline-block lg:hidden\">╭─┐²resources┌────────────────╮</span>\n            <span className=\"md:hidden\">╭─┐²resources┌────╮</span>\n          </div>\n        </h2>\n        <div className=\"text-center text-muted-foreground py-8\">\n          Connecting to system monitoring...\n        </div>\n        <div className=\"text-right text-xs text-muted-foreground mt-4 overflow-hidden\">\n          <div className=\"w-full overflow-hidden\">\n            <span className=\"hidden lg:inline-block\">╰────────────────────────────────────────╯</span>\n            <span className=\"hidden md:inline-block lg:hidden\">╰────────────────────╯</span>\n            <span className=\"md:hidden\">╰────────╯</span>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const coreUsages = Array.isArray(systemMetrics.coreUsages) ? systemMetrics.coreUsages as number[] : [];\n  const loadAverage = Array.isArray(systemMetrics.loadAverage) ? systemMetrics.loadAverage as number[] : [];\n\n  return (\n    <section className=\"terminal-card\" data-testid=\"resource-monitoring\">\n      <h2 className=\"text-lg font-bold text-primary mb-4 overflow-hidden\">\n        <div className=\"w-full overflow-hidden\">\n          <span className=\"hidden lg:inline-block\">╭─┐²resources┌──────────────────────────────────╮</span>\n          <span className=\"hidden md:inline-block lg:hidden\">╭─┐²resources┌────────────────╮</span>\n          <span className=\"md:hidden\">╭─┐²resources┌────╮</span>\n        </div>\n      </h2>\n      \n      {/* CPU Monitoring */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center mb-2 overflow-hidden\">\n          <div className=\"text-sm font-semibold text-foreground min-w-0 flex-1\">\n            <div className=\"truncate\">CPU Usage</div>\n            <div className=\"text-[10px] text-muted-foreground truncate\">{coreUsages.length} Cores @ {systemMetrics.cpuFrequency.toFixed(1)}GHz</div>\n          </div>\n          <div className=\"text-right text-xs flex-shrink-0 ml-2\" data-testid=\"cpu-frequency\">\n            <div className=\"text-primary font-medium\">{systemMetrics.cpuUsage.toFixed(1)}%</div>\n            <div className=\"text-[10px] text-accent\">Load</div>\n          </div>\n        </div>\n        <div className=\"text-xs text-primary mb-3\" data-testid=\"cpu-usage-bar\">\n          <div className=\"flex items-center overflow-hidden w-full\">\n            <span className=\"flex-shrink-0 text-muted-foreground mr-1 w-8\">CPU</span>\n            <div className=\"flex-1 mx-1 min-w-0 overflow-hidden\">\n              <span className=\"ascii-progress text-primary truncate\">\n                <span className=\"hidden sm:inline\">{generateProgressBar(systemMetrics.cpuUsage, 18)}</span>\n                <span className=\"sm:hidden\">{generateResponsiveProgressBar(systemMetrics.cpuUsage)}</span>\n              </span>\n            </div>\n            <span className=\"flex-shrink-0 text-right ml-1 w-12\">{systemMetrics.cpuUsage.toFixed(1)}%</span>\n          </div>\n        </div>\n        <div className=\"space-y-1 text-xs overflow-hidden\">\n          {coreUsages.map((usage, index) => {\n            // Calculate individual core frequency based on load (simulated)\n            const coreFreq = systemMetrics.cpuFrequency * (0.8 + (usage / 100) * 0.4);\n            return (\n              <div key={index} className=\"flex items-center overflow-hidden w-full\">\n                <div className=\"flex-shrink-0 text-muted-foreground mr-1 w-8\">\n                  <div className=\"text-xs font-medium\">C{index}</div>\n                  <div className=\"text-[9px] text-accent truncate\">{coreFreq.toFixed(1)}</div>\n                </div>\n                <div className=\"flex-1 mx-1 min-w-0 overflow-hidden\">\n                  <div className=\"ascii-progress text-primary truncate\">\n                    <span className=\"hidden sm:inline\">{generateProgressBar(usage, 18)}</span>\n                    <span className=\"sm:hidden\">{generateResponsiveProgressBar(usage)}</span>\n                  </div>\n                </div>\n                <div className=\"flex-shrink-0 text-right ml-1 w-12\">\n                  <div className=\"text-primary font-medium text-xs\">{usage.toFixed(0)}%</div>\n                  <div className=\"text-[9px] text-muted-foreground\">{(usage * 0.01 * coreFreq).toFixed(1)}</div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        {loadAverage.length > 0 && (\n          <div className=\"text-xs text-muted-foreground mt-2\">\n            LAV: {loadAverage.map(l => l.toFixed(2)).join(' ')}\n          </div>\n        )}\n      </div>\n      \n      {/* Memory Monitoring */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <span className=\"text-sm font-semibold text-foreground\">Memory</span>\n          <span className=\"text-xs text-primary\" data-testid=\"memory-total\">\n            {formatBytes(systemMetrics.memoryTotal * 1024 * 1024 * 1024)}\n          </span>\n        </div>\n        <div className=\"space-y-2 text-xs\">\n          <div className=\"flex items-center overflow-hidden\">\n            <div className=\"text-muted-foreground min-w-0 flex-shrink-0 mr-2 w-16\">\n              <div className=\"text-xs\">Used</div>\n              <div className=\"text-[10px] text-destructive\">{((systemMetrics.memoryUsed / systemMetrics.memoryTotal) * 100).toFixed(1)}%</div>\n            </div>\n            <span className=\"ascii-progress text-primary flex-1 mx-2 min-w-0\" data-testid=\"memory-used\">\n              <span className=\"hidden sm:inline\">{generateProgressBar((systemMetrics.memoryUsed / systemMetrics.memoryTotal) * 100, 18)}</span>\n              <span className=\"sm:hidden\">{generateResponsiveProgressBar((systemMetrics.memoryUsed / systemMetrics.memoryTotal) * 100)}</span>\n            </span>\n            <div className=\"text-right flex-shrink-0 ml-2 w-20\">\n              <div className=\"text-primary font-medium\">{formatBytes(systemMetrics.memoryUsed * 1024 * 1024 * 1024)}</div>\n              <div className=\"text-[10px] text-muted-foreground\">Active</div>\n            </div>\n          </div>\n          <div className=\"flex items-center overflow-hidden\">\n            <div className=\"text-muted-foreground min-w-0 flex-shrink-0 mr-2 w-16\">\n              <div className=\"text-xs\">Cache</div>\n              <div className=\"text-[10px] text-secondary\">{((systemMetrics.memoryCache / systemMetrics.memoryTotal) * 100).toFixed(1)}%</div>\n            </div>\n            <span className=\"ascii-progress text-secondary flex-1 mx-2 min-w-0\" data-testid=\"memory-cache\">\n              <span className=\"hidden sm:inline\">{generateProgressBar((systemMetrics.memoryCache / systemMetrics.memoryTotal) * 100, 18)}</span>\n              <span className=\"sm:hidden\">{generateResponsiveProgressBar((systemMetrics.memoryCache / systemMetrics.memoryTotal) * 100)}</span>\n            </span>\n            <div className=\"text-right flex-shrink-0 ml-2 w-20\">\n              <div className=\"text-secondary font-medium\">{formatBytes(systemMetrics.memoryCache * 1024 * 1024 * 1024)}</div>\n              <div className=\"text-[10px] text-muted-foreground\">Cached</div>\n            </div>\n          </div>\n          <div className=\"flex items-center overflow-hidden\">\n            <div className=\"text-muted-foreground min-w-0 flex-shrink-0 mr-2 w-16\">\n              <div className=\"text-xs\">Free</div>\n              <div className=\"text-[10px] text-accent\">{((systemMetrics.memoryFree / systemMetrics.memoryTotal) * 100).toFixed(1)}%</div>\n            </div>\n            <span className=\"ascii-progress text-muted-foreground flex-1 mx-2 min-w-0\" data-testid=\"memory-free\">\n              <span className=\"hidden sm:inline\">{generateProgressBar((systemMetrics.memoryFree / systemMetrics.memoryTotal) * 100, 18)}</span>\n              <span className=\"sm:hidden\">{generateResponsiveProgressBar((systemMetrics.memoryFree / systemMetrics.memoryTotal) * 100)}</span>\n            </span>\n            <div className=\"text-right flex-shrink-0 ml-2 w-20\">\n              <div className=\"text-accent font-medium\">{formatBytes(systemMetrics.memoryFree * 1024 * 1024 * 1024)}</div>\n              <div className=\"text-[10px] text-muted-foreground\">Available</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Network Monitoring */}\n      <div>\n        <div className=\"flex justify-between items-center mb-2\">\n          <span className=\"text-sm font-semibold text-foreground\">Network ({systemMetrics.networkInterface})</span>\n          <span className=\"text-xs text-accent\" data-testid=\"network-interface\">Active</span>\n        </div>\n        <div className=\"space-y-2 text-xs\">\n          <div className=\"flex items-center overflow-hidden\">\n            <div className=\"text-muted-foreground min-w-0 flex-shrink-0 mr-2 w-16\">\n              <div className=\"text-xs\">▼ RX</div>\n              <div className=\"text-[10px] text-primary\">{((systemMetrics.networkDownload / 1000000) * 100).toFixed(1)}%</div>\n            </div>\n            <span className=\"ascii-progress text-primary flex-1 mx-2 min-w-0\">\n              <span className=\"hidden sm:inline\">{generateProgressBar(Math.min(systemMetrics.networkDownload / 1000000, 1) * 100, 18)}</span>\n              <span className=\"sm:hidden\">{generateResponsiveProgressBar(Math.min(systemMetrics.networkDownload / 1000000, 1) * 100)}</span>\n            </span>\n            <div className=\"text-primary text-right flex-shrink-0 ml-2 w-24\" data-testid=\"network-download\">\n              <div className=\"font-medium\">{formatBytes(systemMetrics.networkDownload)}/s</div>\n              <div className=\"text-[10px] text-muted-foreground\">Download</div>\n            </div>\n          </div>\n          <div className=\"flex items-center overflow-hidden\">\n            <div className=\"text-muted-foreground min-w-0 flex-shrink-0 mr-2 w-16\">\n              <div className=\"text-xs\">▲ TX</div>\n              <div className=\"text-[10px] text-secondary\">{((systemMetrics.networkUpload / 1000000) * 100).toFixed(1)}%</div>\n            </div>\n            <span className=\"ascii-progress text-secondary flex-1 mx-2 min-w-0\">\n              <span className=\"hidden sm:inline\">{generateProgressBar(Math.min(systemMetrics.networkUpload / 1000000, 1) * 100, 18)}</span>\n              <span className=\"sm:hidden\">{generateResponsiveProgressBar(Math.min(systemMetrics.networkUpload / 1000000, 1) * 100)}</span>\n            </span>\n            <div className=\"text-secondary text-right flex-shrink-0 ml-2 w-24\" data-testid=\"network-upload\">\n              <div className=\"font-medium\">{formatBytes(systemMetrics.networkUpload)}/s</div>\n              <div className=\"text-[10px] text-muted-foreground\">Upload</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"text-right text-xs text-muted-foreground mt-4 overflow-hidden\">\n        <div className=\"w-full overflow-hidden\">\n          <span className=\"hidden lg:inline-block\">╰────────────────────────────────────────╯</span>\n          <span className=\"hidden md:inline-block lg:hidden\">╰────────────────────╯</span>\n          <span className=\"md:hidden\">╰────────╯</span>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":13300},"client/src/components/ServiceDetails.tsx":{"content":"import type { Service, Process } from \"@shared/schema\";\n\ninterface ServiceDetailsProps {\n  services: Service[];\n  processes: Process[];\n}\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'operational': return 'status-operational';\n    case 'degraded': return 'status-degraded';\n    case 'outage': return 'status-outage';\n    default: return 'text-muted-foreground';\n  }\n};\n\nconst generateProgressBar = (percentage: number, maxWidth: number = 50) => {\n  const filledBars = Math.round((percentage / 100) * maxWidth);\n  const emptyBars = maxWidth - filledBars;\n  \n  if (percentage < 95) {\n    return '█'.repeat(filledBars) + '▓'.repeat(emptyBars);\n  }\n  return '█'.repeat(filledBars) + '░'.repeat(emptyBars);\n};\n\nconst formatTimeAgo = (date: Date | string) => {\n  const now = new Date();\n  const then = new Date(date);\n  const diffMs = now.getTime() - then.getTime();\n  const diffSeconds = Math.floor(diffMs / 1000);\n  \n  if (diffSeconds < 60) {\n    return `${diffSeconds}s ago`;\n  }\n  const diffMinutes = Math.floor(diffSeconds / 60);\n  return `${diffMinutes}m ago`;\n};\n\nexport default function ServiceDetails({ services, processes }: ServiceDetailsProps) {\n  return (\n    <section className=\"terminal-card\" data-testid=\"service-details\">\n      <h2 className=\"text-lg font-bold text-primary mb-4\">\n        <div className=\"w-full overflow-hidden\">\n          <span className=\"hidden lg:inline-block\">╭─┐⁴services┌┐detailed┌────────────────────────────────────────────────────────────────────────────────────────────────╮</span>\n          <span className=\"hidden md:inline-block lg:hidden\">╭─┐⁴services┌┐detailed┌──────────────────╮</span>\n          <span className=\"md:hidden\">╭─┐⁴services┌────╮</span>\n        </div>\n      </h2>\n      \n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-xs\" data-testid=\"services-table\">\n          <thead>\n            <tr className=\"border-b border-border\">\n              <th className=\"text-left py-2 px-3 text-muted-foreground\">Service</th>\n              <th className=\"text-left py-2 px-3 text-muted-foreground\">Status</th>\n              <th className=\"text-left py-2 px-3 text-muted-foreground\">Response Time</th>\n              <th className=\"text-left py-2 px-3 text-muted-foreground\">Uptime (24h)</th>\n              <th className=\"text-left py-2 px-3 text-muted-foreground\">Error Rate</th>\n              <th className=\"text-left py-2 px-3 text-muted-foreground\">Last Check</th>\n            </tr>\n          </thead>\n          <tbody>\n            {services.length === 0 ? (\n              <tr>\n                <td colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                  No services data available. Connecting to monitoring...\n                </td>\n              </tr>\n            ) : (\n              services.map((service) => (\n                <tr \n                  key={service.id} \n                  className=\"border-b border-border hover:bg-muted transition-colors\" \n                  data-testid={`service-row-${service.id}`}\n                >\n                  <td className=\"py-2 px-3 font-medium text-foreground\" data-testid={`service-detail-name-${service.id}`}>\n                    {service.name}\n                  </td>\n                  <td className=\"py-2 px-3\">\n                    <span className={getStatusColor(service.status)} data-testid={`service-detail-status-${service.id}`}>\n                      ● {service.status.charAt(0).toUpperCase() + service.status.slice(1)}\n                    </span>\n                  </td>\n                  <td className={`py-2 px-3 ${getStatusColor(service.status)}`} data-testid={`service-detail-response-${service.id}`}>\n                    {service.responseTime}ms\n                  </td>\n                  <td className=\"py-2 px-3\">\n                    <div className={`ascii-progress ${getStatusColor(service.status)}`} data-testid={`service-detail-uptime-${service.id}`}>\n                      {generateProgressBar(service.uptime || 0, 40)} {(service.uptime || 0).toFixed(2)}%\n                    </div>\n                  </td>\n                  <td className={`py-2 px-3 ${getStatusColor(service.status)}`} data-testid={`service-detail-errors-${service.id}`}>\n                    {service.status === 'operational' ? '0.00%' : \n                     service.status === 'degraded' ? '2.1%' : '15.2%'}\n                  </td>\n                  <td className=\"py-2 px-3 text-muted-foreground\" data-testid={`service-detail-check-${service.id}`}>\n                    {service.lastChecked ? formatTimeAgo(service.lastChecked) : 'Never'}\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n      \n      {/* Process List */}\n      {processes.length > 0 && (\n        <div className=\"mt-6\">\n          <h3 className=\"text-sm font-semibold text-foreground border-b border-border pb-2 mb-4\">\n            Top Processes\n          </h3>\n          <div className=\"space-y-2\">\n            {processes.slice(0, 10).map((process) => (\n              <div \n                key={process.id} \n                className=\"flex items-center justify-between text-xs bg-muted/50 rounded px-3 py-2\" \n                data-testid={`process-${process.pid}`}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <span className=\"text-muted-foreground w-16\" data-testid={`process-pid-${process.pid}`}>\n                    {process.pid}\n                  </span>\n                  <span className=\"text-foreground font-medium w-32 truncate\" data-testid={`process-name-${process.pid}`}>\n                    {process.name}\n                  </span>\n                  <span className=\"text-muted-foreground w-24\" data-testid={`process-user-${process.pid}`}>\n                    {process.user}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <span className=\"text-primary w-16\" data-testid={`process-memory-${process.pid}`}>\n                    {process.memory}\n                  </span>\n                  <span className=\"text-accent w-12\" data-testid={`process-cpu-${process.pid}`}>\n                    {process.cpuUsage.toFixed(1)}%\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      <div className=\"text-right text-xs text-muted-foreground mt-4\">\n        <div className=\"w-full overflow-hidden\">\n          <span className=\"hidden lg:inline-block\">╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n          <span className=\"hidden md:inline-block lg:hidden\">╰──────────────────────────────────────╯</span>\n          <span className=\"md:hidden\">╰──────────╯</span>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7542},"client/src/components/SystemOverview.tsx":{"content":"import type { Service } from \"@shared/schema\";\n\ninterface SystemOverviewProps {\n  services: Service[];\n  overallStatus: string;\n}\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'operational': return 'status-operational';\n    case 'degraded': return 'status-degraded';\n    case 'outage': return 'status-outage';\n    default: return 'text-muted-foreground';\n  }\n};\n\nconst generateProgressBar = (percentage: number, status: string) => {\n  const totalBars = 30;\n  const filledBars = Math.round((percentage / 100) * totalBars);\n  const emptyBars = totalBars - filledBars;\n  \n  const filled = '█'.repeat(filledBars);\n  const empty = status === 'degraded' ? '▓'.repeat(emptyBars) : '░'.repeat(emptyBars);\n  \n  return filled + empty;\n};\n\nexport default function SystemOverview({ services, overallStatus }: SystemOverviewProps) {\n  const statusCounts = {\n    operational: services.filter(s => s.status === 'operational').length,\n    degraded: services.filter(s => s.status === 'degraded').length,\n    outage: services.filter(s => s.status === 'outage').length,\n  };\n\n  return (\n    <section className=\"terminal-card\" data-testid=\"system-overview\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-lg font-bold text-primary\">\n          <div className=\"w-full overflow-hidden\">\n            <span className=\"hidden lg:inline-block\">╭─┐¹system┌──┐overview┌┐status┌─────────────────────────────────────────────────╮</span>\n            <span className=\"hidden md:inline-block lg:hidden\">╭─┐¹system┌──┐overview┌─────────────────╮</span>\n            <span className=\"md:hidden\">╭─┐¹system┌────╮</span>\n          </div>\n        </h2>\n        <div className=\"text-sm text-muted-foreground\">\n          Auto-refresh: <span className=\"text-secondary\">ON</span>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n        {services.map((service) => (\n          <div key={service.id} className=\"bg-muted rounded border border-border p-4\" data-testid={`service-card-${service.id}`}>\n            <div className=\"flex items-center justify-between mb-2\">\n              <h3 className=\"text-sm font-semibold text-foreground\" data-testid={`service-name-${service.id}`}>\n                {service.name}\n              </h3>\n              <span className={`${getStatusColor(service.status)} text-xs`}>●</span>\n            </div>\n            <div className=\"ascii-progress text-xs text-primary mb-2\">\n              {generateProgressBar(service.uptime || 0, service.status)} {(service.uptime || 0).toFixed(1)}%\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              <div>Response: <span className={`${getStatusColor(service.status)}`} data-testid={`service-response-${service.id}`}>\n                {service.responseTime}ms\n              </span></div>\n              <div>Uptime: <span className={`${getStatusColor(service.status)}`} data-testid={`service-uptime-${service.id}`}>\n                {(service.uptime || 0).toFixed(2)}%\n              </span></div>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"border-t border-border pt-4\">\n        <div className=\"text-sm text-primary font-semibold mb-2\">Overall System Status:</div>\n        <div className=\"flex items-center space-x-4 text-sm\" data-testid=\"status-summary\">\n          <span className=\"status-operational\">█ Operational ({statusCounts.operational} services)</span>\n          <span className=\"status-degraded\">█ Degraded ({statusCounts.degraded} services)</span>\n          <span className=\"text-muted-foreground\">█ Outage ({statusCounts.outage} services)</span>\n        </div>\n      </div>\n      \n      <div className=\"text-right text-xs text-muted-foreground mt-4\">\n        <div className=\"w-full overflow-hidden\">\n          <span className=\"hidden lg:inline-block\">╰─────────────────────────────────────────────────────────────────────────────╯</span>\n          <span className=\"hidden md:inline-block lg:hidden\">╰─────────────────────────────────────╯</span>\n          <span className=\"md:hidden\">╰──────────────╯</span>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4689},"client/src/components/TerminalHeader.tsx":{"content":"interface TerminalHeaderProps {\n  lastUpdated: string;\n  totalUptime: string;\n  isConnected: boolean;\n}\n\nexport default function TerminalHeader({ lastUpdated, totalUptime, isConnected }: TerminalHeaderProps) {\n  return (\n    <header className=\"border-b border-border bg-card\" data-testid=\"terminal-header\">\n      <div className=\"container mx-auto px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-primary font-bold text-lg\">╭─</span>\n            <h1 className=\"text-xl font-bold text-primary terminal-glow\" data-testid=\"header-title\">\n              Velvotek Status\n            </h1>\n            <span className=\"text-primary font-bold text-lg\">─╮</span>\n          </div>\n          <div className=\"flex items-center space-x-4 text-sm\">\n            <span className=\"text-muted-foreground\">\n              <span className={isConnected ? \"text-accent\" : \"text-destructive\"}>•</span> \n              Last Updated: <span data-testid=\"last-updated\">{lastUpdated || \"Connecting...\"}</span>\n            </span>\n            <span className=\"text-muted-foreground\">\n              <span className=\"text-primary\">•</span> \n              Uptime: <span data-testid=\"total-uptime\">{totalUptime}</span>\n            </span>\n            <span className=\"blink text-primary\">█</span>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1454},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useState, useRef } from 'react';\n\nexport function useWebSocket(path: string) {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n\n  const connect = () => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}${path}`;\n    \n    const ws = new WebSocket(wsUrl);\n    \n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      setSocket(ws);\n    };\n    \n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n      setSocket(null);\n      \n      // Reconnect after 5 seconds\n      reconnectTimeoutRef.current = setTimeout(() => {\n        console.log('Attempting to reconnect WebSocket...');\n        connect();\n      }, 5000);\n    };\n    \n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n    };\n  };\n\n  useEffect(() => {\n    connect();\n    \n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, []);\n\n  return { socket, isConnected };\n}\n","size_bytes":1331},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminLogin.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { Shield, Terminal } from 'lucide-react';\n\nexport default function AdminLogin() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!username || !password) {\n      toast({\n        title: 'Error',\n        description: 'Please enter both username and password',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/admin/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Login failed');\n      }\n\n      const { token, admin } = await response.json();\n      \n      // Store token in localStorage\n      localStorage.setItem('adminToken', token);\n      localStorage.setItem('adminUser', JSON.stringify(admin));\n\n      toast({\n        title: 'Success',\n        description: `Welcome back, ${admin.username}`,\n        variant: 'default',\n      });\n\n      // Redirect to admin panel\n      navigate('/admin');\n    } catch (error) {\n      toast({\n        title: 'Login Failed',\n        description: error instanceof Error ? error.message : 'Invalid credentials',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"terminal-border bg-card/90 backdrop-blur\">\n          <CardHeader className=\"space-y-4 text-center\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Terminal className=\"h-8 w-8 text-primary\" />\n              <Shield className=\"h-8 w-8 text-accent\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-2xl font-mono\">Admin Access</CardTitle>\n              <CardDescription className=\"text-muted-foreground mt-2\">\n                Enter your credentials to access the system administration panel\n              </CardDescription>\n            </div>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\" className=\"text-foreground font-mono\">\n                  Username\n                </Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"admin\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  className=\"bg-background/50 border-border font-mono\"\n                  data-testid=\"input-username\"\n                  disabled={isLoading}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-foreground font-mono\">\n                  Password\n                </Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"bg-background/50 border-border font-mono\"\n                  data-testid=\"input-password\"\n                  disabled={isLoading}\n                />\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full font-mono\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"animate-spin h-4 w-4 border-2 border-current border-t-transparent rounded-full\" />\n                    <span>Authenticating...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-2\">\n                    <Shield className=\"h-4 w-4\" />\n                    <span>Access System</span>\n                  </div>\n                )}\n              </Button>\n            </form>\n            \n            <div className=\"mt-6 text-center\">\n              <button\n                onClick={() => navigate('/')}\n                className=\"text-sm text-muted-foreground hover:text-foreground font-mono transition-colors\"\n                data-testid=\"link-back-to-status\"\n              >\n                ← Back to Status Page\n              </button>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Terminal-style footer */}\n        <div className=\"mt-6 text-center text-xs font-mono text-muted-foreground\">\n          <div className=\"border border-border/30 bg-card/20 p-2 rounded\">\n            [SECURE] Administrative access portal • Velvotek Status\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5656},"client/src/pages/AdminPanel.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Shield, \n  Terminal, \n  Server, \n  Activity, \n  AlertTriangle, \n  Play, \n  Square, \n  RotateCcw,\n  LogOut,\n  Wifi,\n  WifiOff,\n  Cog\n} from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport type { Service } from '@shared/schema';\n\ninterface AdminUser {\n  id: number;\n  username: string;\n}\n\ninterface VPSStatus {\n  connected: boolean;\n  host?: string;\n  port?: number;\n}\n\nexport default function AdminPanel() {\n  const [adminUser, setAdminUser] = useState<AdminUser | null>(null);\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [vpsProcesses, setVpsProcesses] = useState<any>(null);\n\n  // Check authentication on mount\n  useEffect(() => {\n    const token = localStorage.getItem('adminToken');\n    const userStr = localStorage.getItem('adminUser');\n\n    if (!token || !userStr) {\n      navigate('/admin/login');\n      return;\n    }\n\n    try {\n      const user = JSON.parse(userStr);\n      setAdminUser(user);\n    } catch (error) {\n      console.error('Error parsing admin user:', error);\n      navigate('/admin/login');\n    }\n  }, [navigate]);\n\n  // Query VPS status\n  const { data: vpsStatus } = useQuery<VPSStatus>({\n    queryKey: ['/api/admin/vps/status'],\n    queryFn: async () => {\n      const token = localStorage.getItem('adminToken');\n      const response = await fetch('/api/admin/vps/status', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (!response.ok) throw new Error('Failed to fetch VPS status');\n      return response.json();\n    },\n    enabled: !!adminUser,\n    refetchInterval: 5000, // Poll every 5 seconds\n  });\n\n  // Query services\n  const { data: services = [], refetch: refetchServices } = useQuery<Service[]>({\n    queryKey: ['/api/services'],\n    enabled: !!adminUser,\n  });\n\n  // Query VPS processes\n  const { data: vpsProcessesQuery } = useQuery({\n    queryKey: ['/api/admin/vps/processes'],\n    queryFn: async () => {\n      const token = localStorage.getItem('adminToken');\n      const response = await fetch('/api/admin/vps/processes?limit=50', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (!response.ok) throw new Error('Failed to fetch VPS processes');\n      return response.json();\n    },\n    enabled: !!adminUser,\n    refetchInterval: 5000,\n  });\n\n  // Use React Query data if available, fallback to local state\n  const effectiveVpsProcesses = vpsProcessesQuery || vpsProcesses;\n\n  const handleLogout = () => {\n    localStorage.removeItem('adminToken');\n    localStorage.removeItem('adminUser');\n    toast({\n      title: 'Logged Out',\n      description: 'You have been successfully logged out',\n    });\n    navigate('/');\n  };\n\n  const handleServiceAction = async (serviceName: string, action: 'start' | 'stop' | 'restart') => {\n    try {\n      const token = localStorage.getItem('adminToken');\n      const response = await fetch(`/api/admin/services/${serviceName}/${action}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to ${action} service`);\n      }\n\n      const result = await response.json();\n\n      toast({\n        title: result.success ? 'Success' : 'Error',\n        description: result.message,\n        variant: result.success ? 'default' : 'destructive',\n      });\n\n      if (result.success) {\n        // Refresh services data\n        setTimeout(() => refetchServices(), 1000);\n      }\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : `Failed to ${action} service`,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  // Fetch VPS processes\n  useEffect(() => {\n    const token = localStorage.getItem('adminToken');\n    if (!token) return;\n\n    const fetchVpsProcesses = async () => {\n      try {\n        const response = await fetch('/api/admin/vps/processes?limit=50', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setVpsProcesses(data);\n        } else {\n          setVpsProcesses({ connectionActive: false });\n        }\n      } catch (error) {\n        console.error('Failed to fetch VPS processes:', error);\n        setVpsProcesses({ connectionActive: false });\n      }\n    };\n\n    fetchVpsProcesses();\n    const vpsInterval = setInterval(fetchVpsProcesses, 5000);\n\n    return () => clearInterval(vpsInterval);\n  }, []);\n\n\n  if (!adminUser) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin h-8 w-8 border-2 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b border-border bg-card/50 backdrop-blur\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Terminal className=\"h-8 w-8 text-primary\" />\n                <Shield className=\"h-8 w-8 text-accent\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold font-mono\">Admin Panel</h1>\n                <p className=\"text-muted-foreground\">Velvotek Status Administration</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm font-mono\">\n                Welcome, <span className=\"text-primary\">{adminUser.username}</span>\n              </span>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={() => navigate('/')}\n                data-testid=\"button-view-status\"\n              >\n                <Activity className=\"h-4 w-4 mr-2\" />\n                View Status Page\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={handleLogout}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n\n          {/* VPS Connection Status */}\n          <Card className=\"terminal-border\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 font-mono\">\n                <Server className=\"h-5 w-5\" />\n                <span>VPS Connection</span>\n              </CardTitle>\n              <CardDescription>\n                Real-time server connection status\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-mono\">Status</span>\n                  <Badge \n                    variant={vpsStatus?.connected ? 'default' : 'destructive'}\n                    className=\"font-mono\"\n                  >\n                    {vpsStatus?.connected ? (\n                      <>\n                        <Wifi className=\"h-3 w-3 mr-1\" />\n                        Connected\n                      </>\n                    ) : (\n                      <>\n                        <WifiOff className=\"h-3 w-3 mr-1\" />\n                        Disconnected\n                      </>\n                    )}\n                  </Badge>\n                </div>\n\n                {vpsStatus?.host && (\n                  <>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-mono\">Host</span>\n                      <code className=\"text-sm bg-muted px-2 py-1 rounded\">\n                        {vpsStatus.host}\n                      </code>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-mono\">Port</span>\n                      <code className=\"text-sm bg-muted px-2 py-1 rounded\">\n                        {vpsStatus.port}\n                      </code>\n                    </div>\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* System Overview */}\n          <Card className=\"terminal-border\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 font-mono\">\n                <Activity className=\"h-5 w-5\" />\n                <span>System Overview</span>\n              </CardTitle>\n              <CardDescription>\n                Current system status summary\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-mono\">Total Services</span>\n                  <Badge variant=\"secondary\" className=\"font-mono\">\n                    {services.length}\n                  </Badge>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-mono\">Operational</span>\n                  <Badge variant=\"default\" className=\"font-mono\">\n                    {services.filter(s => s.status === 'operational').length}\n                  </Badge>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-mono\">Issues</span>\n                  <Badge variant=\"destructive\" className=\"font-mono\">\n                    {services.filter(s => s.status !== 'operational').length}\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card className=\"terminal-border\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 font-mono\">\n                <AlertTriangle className=\"h-5 w-5\" />\n                <span>Quick Actions</span>\n              </CardTitle>\n              <CardDescription>\n                Emergency system controls\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full font-mono justify-start\"\n                  onClick={() => toast({\n                    title: 'Feature Coming Soon',\n                    description: 'Service discovery will be implemented next',\n                  })}\n                  data-testid=\"button-discover-services\"\n                >\n                  <Server className=\"h-4 w-4 mr-2\" />\n                  Discover Services\n                </Button>\n\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full font-mono justify-start\"\n                  onClick={() => refetchServices()}\n                  data-testid=\"button-refresh-status\"\n                >\n                  <RotateCcw className=\"h-4 w-4 mr-2\" />\n                  Refresh Status\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* VPS Processes */}\n        <Card className=\"terminal-border lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 font-mono\">\n              <Activity className=\"h-5 w-5\" />\n              <span>VPS Processes</span>\n              {effectiveVpsProcesses && (\n                <Badge variant=\"outline\" className=\"ml-2\">\n                  {effectiveVpsProcesses.totalProcesses} total\n                </Badge>\n              )}\n            </CardTitle>\n            <CardDescription>\n              Real-time processes running on the VPS\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {effectiveVpsProcesses?.connectionActive ? (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                  <div>\n                    <h4 className=\"text-sm font-semibold mb-2 flex items-center\">\n                      <Cog className=\"h-4 w-4 mr-2\" />\n                      Active Services ({effectiveVpsProcesses.services?.length || 0})\n                    </h4>\n                    <div className=\"space-y-1 max-h-32 overflow-y-auto\">\n                      {effectiveVpsProcesses.services?.slice(0, 8).map((service: any) => (\n                        <div key={service.id} className=\"flex items-center justify-between text-xs bg-muted/50 rounded px-2 py-1\">\n                          <span className=\"font-mono\">{service.name}</span>\n                          <Badge \n                            variant={service.status === 'operational' ? 'default' : 'destructive'}\n                            className=\"text-xs\"\n                          >\n                            {service.status}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"text-sm font-semibold mb-2 flex items-center\">\n                      <Activity className=\"h-4 w-4 mr-2\" />\n                      Top Processes by CPU\n                    </h4>\n                    <div className=\"space-y-1 max-h-32 overflow-y-auto\">\n                      {effectiveVpsProcesses.processes?.slice(0, 8).map((process: any) => (\n                        <div key={process.pid} className=\"flex items-center justify-between text-xs bg-muted/50 rounded px-2 py-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-muted-foreground w-12\">{process.pid}</span>\n                            <span className=\"font-mono truncate w-20\">{process.name}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-xs text-muted-foreground\">{process.memory}</span>\n                            <span className=\"text-xs font-medium\">{process.cpuUsage.toFixed(1)}%</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <WifiOff className=\"h-8 w-8 mx-auto text-muted-foreground mb-2\" />\n                <p className=\"text-muted-foreground\">VPS connection not active</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Service Management */}\n        <Card className=\"terminal-border mt-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 font-mono\">\n              <Server className=\"h-5 w-5\" />\n              <span>Service Management</span>\n            </CardTitle>\n            <CardDescription>\n              Monitor and control system services\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {services.map((service) => (\n                <Card key={service.id} className=\"border-border/50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <h3 className=\"font-mono font-semibold\">{service.name}</h3>\n                        <Badge \n                          variant={\n                            service.status === 'operational' ? 'default' : \n                            service.status === 'degraded' ? 'secondary' : 'destructive'\n                          }\n                          className=\"font-mono text-xs\"\n                        >\n                          {service.status}\n                        </Badge>\n                      </div>\n\n                      <div className=\"text-sm text-muted-foreground space-y-1\">\n                        <div>Response: {service.responseTime}ms</div>\n                        <div>Uptime: {service.uptime}%</div>\n                      </div>\n\n                      <div className=\"flex space-x-1\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"flex-1 text-xs font-mono\"\n                          onClick={() => handleServiceAction(service.name, 'start')}\n                          data-testid={`button-start-${service.name}`}\n                        >\n                          <Play className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"flex-1 text-xs font-mono\"\n                          onClick={() => handleServiceAction(service.name, 'stop')}\n                          data-testid={`button-stop-${service.name}`}\n                        >\n                          <Square className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"flex-1 text-xs font-mono\"\n                          onClick={() => handleServiceAction(service.name, 'restart')}\n                          data-testid={`button-restart-${service.name}`}\n                        >\n                          <RotateCcw className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":18668},"client/src/pages/dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport TerminalHeader from \"@/components/TerminalHeader\";\nimport SystemOverview from \"@/components/SystemOverview\";\nimport ResourceMonitoring from \"@/components/ResourceMonitoring\";\nimport IncidentHistory from \"@/components/IncidentHistory\";\nimport ServiceDetails from \"@/components/ServiceDetails\";\nimport NotificationFooter from \"@/components/NotificationFooter\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport type { SystemUpdate, Service, SystemMetrics, Process, Incident } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const [services, setServices] = useState<Service[]>([]);\n  const [systemMetrics, setSystemMetrics] = useState<SystemMetrics | null>(null);\n  const [processes, setProcesses] = useState<Process[]>([]);\n  const [incidents, setIncidents] = useState<Incident[]>([]);\n  const [lastUpdated, setLastUpdated] = useState<string>(\"\");\n\n  const { socket, isConnected } = useWebSocket(\"/ws\");\n\n  useEffect(() => {\n    if (!socket) return;\n\n    const handleMessage = (event: MessageEvent) => {\n      try {\n        const message = JSON.parse(event.data);\n        \n        switch (message.type) {\n          case 'system_update':\n            const data: SystemUpdate = message.data;\n            setSystemMetrics(data.metrics);\n            setServices(data.services);\n            setProcesses(data.processes);\n            setLastUpdated(new Date().toLocaleTimeString('en-US', { \n              hour12: false, \n              hour: '2-digit', \n              minute: '2-digit' \n            }));\n            break;\n          case 'incident_update':\n            setIncidents(message.data);\n            break;\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    socket.addEventListener('message', handleMessage);\n\n    return () => {\n      socket.removeEventListener('message', handleMessage);\n    };\n  }, [socket]);\n\n  const overallStatus = services.length > 0 ? \n    services.some(s => s.status === 'outage') ? 'outage' :\n    services.some(s => s.status === 'degraded') ? 'degraded' : 'operational'\n    : 'operational';\n\n  const totalUptime = services.length > 0 ? \n    (services.reduce((acc, s) => acc + (s.uptime || 0), 0) / services.length).toFixed(2) + '%'\n    : '100%';\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-mono leading-tight\">\n      <TerminalHeader \n        lastUpdated={lastUpdated}\n        totalUptime={totalUptime}\n        isConnected={isConnected}\n      />\n      \n      <main className=\"container mx-auto px-4 py-6 space-y-6\">\n        <SystemOverview \n          services={services}\n          overallStatus={overallStatus}\n        />\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <ResourceMonitoring systemMetrics={systemMetrics} />\n          <IncidentHistory incidents={incidents} />\n        </div>\n\n        <ServiceDetails \n          services={services}\n          processes={processes}\n        />\n\n        <NotificationFooter />\n      </main>\n\n      {/* Terminal Footer */}\n      <footer className=\"border-t border-border bg-card mt-8\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0\">\n            <div className=\"text-xs text-muted-foreground\">\n              <div className=\"flex items-center space-x-4\">\n                <span>System: <span className=\"text-primary\">Velvotek Infrastructure</span></span>\n                <span>|</span>\n                <span>Region: <span className=\"text-accent\">Global</span></span>\n                <span>|</span>\n                <span>Uptime: <span className=\"text-primary\">{totalUptime}</span></span>\n              </div>\n            </div>\n            <div className=\"text-xs text-muted-foreground flex items-center space-x-4\">\n              <span>Powered by Terminal Monitoring</span>\n              <span className=\"blink text-primary\">█</span>\n            </div>\n          </div>\n          <div className=\"text-center text-xs text-muted-foreground mt-4\">\n            ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":4587},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"DOWNLOAD-PACKAGE-GUIDE.md":{"content":"# Download & Package Guide - Velvotek Status\n\n## For the Current User: How to Package This for Download\n\n### Method 1: Direct Download (Recommended)\n1. **Download the entire project folder** from your current workspace\n2. **Share the zipped folder** with anyone who wants to host it locally\n3. **Include these files** in the package:\n   - All source code files (`client/`, `server/`, `shared/`)\n   - `package.json` (dependencies already cleaned)\n   - `vite.config.local.ts` (clean configuration)\n   - `setup-local.sh` (automated setup script)\n   - `README-LOCAL-SETUP.md` (detailed instructions)\n   - `DOWNLOAD-PACKAGE-GUIDE.md` (this file)\n\n### Method 2: Create a Clean Export\nIf you want to create a completely fresh package:\n\n1. **Create a new folder** called `velvotek-status`\n2. **Copy these directories and files**:\n   ```\n   client/                  # Complete React frontend\n   server/                  # Complete Express backend  \n   shared/                  # Shared types and schemas\n   package.json            # Dependencies (Replit packages already removed)\n   vite.config.local.ts    # Clean Vite configuration\n   setup-local.sh          # Automated setup script\n   README-LOCAL-SETUP.md   # Setup instructions\n   tsconfig.json           # TypeScript configuration\n   tailwind.config.ts      # Tailwind CSS configuration  \n   postcss.config.js       # PostCSS configuration\n   drizzle.config.ts       # Database configuration\n   ```\n\n3. **Do NOT copy these Replit-specific files**:\n   - `.replit`\n   - `replit.nix`\n   - `replit.md`\n   - Any `.env` files with Replit secrets\n\n4. **Zip the folder** and it's ready for download!\n\n## For Recipients: How to Set Up Locally\n\n### Quick Setup (Using the automated script)\n1. **Extract the downloaded files**\n2. **Open terminal/command prompt** in the project directory\n3. **Run the setup script**:\n   ```bash\n   # On macOS/Linux:\n   chmod +x setup-local.sh\n   ./setup-local.sh\n   \n   # On Windows (Git Bash):\n   bash setup-local.sh\n   ```\n4. **Start the application**:\n   ```bash\n   npm run dev\n   ```\n\n### Manual Setup\nIf the automated script doesn't work:\n\n1. **Extract files** and navigate to the directory\n2. **Replace the Vite config**:\n   ```bash\n   mv vite.config.ts vite.config.ts.backup\n   mv vite.config.local.ts vite.config.ts\n   ```\n3. **Install dependencies**:\n   ```bash\n   npm install\n   ```\n4. **Start development server**:\n   ```bash\n   npm run dev\n   ```\n\n## What's Included\n\n✅ **Velvotek Status - Real-time System Monitoring**\n- Live CPU, memory, network metrics\n- Service status tracking with uptime\n- Process monitoring and management\n- Incident tracking and logging\n- WebSocket-powered real-time updates\n- Terminal-style dark theme interface\n\n✅ **Complete Full-Stack Application**\n- React frontend with TypeScript\n- Express.js backend with API endpoints\n- WebSocket server for real-time updates\n- In-memory storage (easily expandable to database)\n- Admin panel for system management\n\n✅ **Production Ready**\n- Development and production build scripts\n- Proper error handling and logging\n- TypeScript for type safety\n- Modern UI with shadcn/ui components\n- Responsive design\n\n✅ **No External Dependencies**\n- Runs completely locally\n- No cloud services required\n- Optional VPS integration via SSH\n- Simulated data when no external connections\n\n## System Requirements\n\n- **Node.js**: Version 18 or higher\n- **RAM**: 512MB minimum\n- **Storage**: 100MB for source code + node_modules\n- **Network**: Local network access (no internet required)\n\n## Default Access\n\nOnce running, access the dashboard at:\n- **Main Dashboard**: `http://localhost:5000`\n- **Admin Panel**: `http://localhost:5000/admin`\n- **Default Admin**: Username: `admin`, Password: `admin123`\n\n## Customization\n\nThe dashboard is fully customizable:\n- **Styling**: Edit CSS variables in `client/src/index.css`\n- **Components**: Modify React components in `client/src/components/`\n- **API**: Extend backend routes in `server/routes.ts`\n- **Data**: Update storage implementation in `server/storage.ts`\n- **Real VPS**: Add SSH credentials to connect to actual servers\n\n## Support\n\nFor questions or issues:\n1. Check `README-LOCAL-SETUP.md` for detailed setup instructions\n2. Verify Node.js version is 18+\n3. Ensure port 5000 is not in use by other applications\n4. Try running `npm install` again if dependencies fail","size_bytes":4357},"README-LOCAL-SETUP.md":{"content":"# Velvotek Status - Local Setup\n\nThis is Velvotek Status, a real-time system monitoring dashboard with a terminal-style interface. It features live system metrics, service status monitoring, process information, and incident tracking.\n\n## Technologies Used\n\n- **Frontend**: React + TypeScript + Vite + Tailwind CSS + shadcn/ui\n- **Backend**: Express.js + TypeScript + WebSockets\n- **Real-time**: WebSocket connections for live data updates\n- **Styling**: Terminal-inspired dark theme with monospace fonts\n\n## Prerequisites\n\n- Node.js (version 18 or higher)\n- npm or yarn package manager\n\n## Local Installation & Setup\n\n### 1. Download and Extract\nExtract the project files to your desired directory.\n\n### 2. Replace Configuration Files\nTo remove Replit dependencies, replace the following files:\n\n**Replace `vite.config.ts` with the contents of `vite.config.local.ts`:**\n```bash\n# Delete the original file and rename the local version\nrm vite.config.ts\nmv vite.config.local.ts vite.config.ts\n```\n\n### 3. Install Dependencies\n```bash\nnpm install\n```\n\n### 4. Windows Compatibility Fix\nIf you're on Windows and get `'NODE_ENV' is not recognized` error, run this command to fix it:\n\n```bash\n# Option 1: Use the automated setup script\nchmod +x setup-local.sh\n./setup-local.sh\n\n# Option 2: Manual fix - Install cross-env and update scripts\nnpm install cross-env\n```\n\nThen manually update your `package.json` scripts section to:\n```json\n{\n  \"scripts\": {\n    \"dev\": \"cross-env NODE_ENV=development tsx server/index.ts\",\n    \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\",\n    \"start\": \"cross-env NODE_ENV=production node dist/index.js\",\n    \"check\": \"tsc\",\n    \"db:push\": \"drizzle-kit push\"\n  }\n}\n```\n\n### 4. Start Development Server\n```bash\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n### 5. Production Build\n```bash\n# Build the application\nnpm run build\n\n# Start production server\nnpm start\n```\n\n## Features\n\n- **Real-time System Monitoring**: Live CPU, memory, and network metrics\n- **Service Status Tracking**: Monitor multiple services with uptime statistics\n- **Process Management**: View running processes with resource usage\n- **Incident Tracking**: Log and track system incidents\n- **WebSocket Integration**: Real-time updates without page refresh\n- **Terminal Aesthetic**: Classic Unix system monitor appearance\n- **Admin Panel**: Administrative interface for system management\n\n## API Endpoints\n\n- `GET /api/services` - Get all services\n- `GET /api/incidents` - Get all incidents  \n- `GET /api/metrics` - Get system metrics\n- `GET /api/processes` - Get running processes\n- `WebSocket /ws` - Real-time updates\n\n## VPS Integration (Optional)\n\nThe application can connect to a real VPS via SSH to display actual system metrics. Set these environment variables:\n\n```bash\nVPS_HOST=your-server.com\nVPS_USERNAME=your-username\nVPS_PASSWORD=your-password\nVPS_PORT=22\n```\n\nIf not configured, the application will use simulated data for demonstration purposes.\n\n## Environment Variables\n\n- `PORT` - Server port (default: 5000)\n- `NODE_ENV` - Environment mode (development/production)\n- `VPS_HOST` - VPS server hostname (optional)\n- `VPS_USERNAME` - VPS SSH username (optional)\n- `VPS_PASSWORD` - VPS SSH password (optional)\n- `VPS_PORT` - VPS SSH port (optional, default: 22)\n\n## Project Structure\n\n```\n├── client/              # React frontend\n│   ├── src/\n│   │   ├── components/  # UI components\n│   │   ├── hooks/       # Custom React hooks\n│   │   ├── lib/         # Utility libraries\n│   │   └── pages/       # Application pages\n├── server/              # Express backend\n│   ├── services/        # Business logic services\n│   ├── routes.ts        # API routes & WebSocket handlers\n│   └── storage.ts       # Data storage layer\n├── shared/              # Shared types and schemas\n└── README-LOCAL-SETUP.md # This file\n```\n\n## Custom Domain Setup (status.velvotek.xyz)\n\nTo set up a custom subdomain like `status.velvotek.xyz` for your Velvotek Status dashboard, we recommend using Cloudflare for the best experience.\n\n### Prerequisites for Custom Domain\n- A registered domain name (e.g., velvotek.xyz)\n- A server with a public IP address\n- SSH access to your server\n- Basic Linux/server administration knowledge\n\n## Option A: Cloudflare Setup (Recommended)\n\nCloudflare provides free SSL, DDoS protection, CDN, and easy DNS management.\n\n### 1. Cloudflare Domain Setup\n\n1. **Register your domain** through Cloudflare or transfer an existing domain:\n   - Go to [Cloudflare](https://cloudflare.com)\n   - Create an account and add your domain\n   - If domain is registered elsewhere, change nameservers to Cloudflare's\n\n2. **Configure DNS records** in Cloudflare dashboard:\n   ```\n   # A record for status subdomain pointing to your server's public IP\n   Type: A\n   Name: status\n   IPv4 address: YOUR_SERVER_IP\n   Proxy status: Proxied (orange cloud) ✅\n   TTL: Auto\n\n   # Optional: Root domain redirect (if you want velvotek.xyz to redirect to status.velvotek.xyz)\n   Type: A\n   Name: @ (or velvotek.xyz)\n   IPv4 address: YOUR_SERVER_IP\n   Proxy status: Proxied (orange cloud) ✅\n   TTL: Auto\n   ```\n\n3. **SSL/TLS Configuration**:\n   - Go to SSL/TLS → Overview\n   - Set encryption mode to **\"Full (strict)\"** for maximum security\n   - Go to SSL/TLS → Edge Certificates\n   - Enable **\"Always Use HTTPS\"**\n   - Enable **\"HTTP Strict Transport Security (HSTS)\"**\n\n### 2. Cloudflare-Optimized Server Setup\n\nSince Cloudflare handles SSL termination, your server configuration is simpler:\n\n#### Install Nginx\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install nginx\n\n# CentOS/RHEL\nsudo yum install epel-release\nsudo yum install nginx\n```\n\n#### Configure Nginx for Cloudflare\nCreate configuration file:\n```bash\nsudo nano /etc/nginx/sites-available/status.velvotek.xyz\n```\n\nAdd this Cloudflare-optimized configuration:\n```nginx\nserver {\n    listen 80;\n    server_name status.velvotek.xyz;\n\n    # Cloudflare real IP restoration\n    set_real_ip_from 103.21.244.0/22;\n    set_real_ip_from 103.22.200.0/22;\n    set_real_ip_from 103.31.4.0/22;\n    set_real_ip_from 104.16.0.0/13;\n    set_real_ip_from 104.24.0.0/14;\n    set_real_ip_from 108.162.192.0/18;\n    set_real_ip_from 131.0.72.0/22;\n    set_real_ip_from 141.101.64.0/18;\n    set_real_ip_from 162.158.0.0/15;\n    set_real_ip_from 172.64.0.0/13;\n    set_real_ip_from 173.245.48.0/20;\n    set_real_ip_from 188.114.96.0/20;\n    set_real_ip_from 190.93.240.0/20;\n    set_real_ip_from 197.234.240.0/22;\n    set_real_ip_from 198.41.128.0/17;\n    real_ip_header CF-Connecting-IP;\n\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n        \n        # Cloudflare headers\n        proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;\n        proxy_set_header CF-Ray $http_cf_ray;\n        proxy_set_header CF-Visitor $http_cf_visitor;\n    }\n\n    # WebSocket support for real-time updates\n    location /ws {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Cloudflare headers for WebSockets\n        proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;\n    }\n}\n```\n\n#### Enable the site\n```bash\nsudo ln -s /etc/nginx/sites-available/status.velvotek.xyz /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\nsudo systemctl enable nginx\n```\n\n### 3. Cloudflare Security & Performance\n\n#### Page Rules (Optional but recommended)\nIn Cloudflare dashboard → Page Rules, add:\n```\nURL: status.velvotek.xyz/api/*\nSettings: Cache Level = Bypass\n```\n\n#### Firewall Rules (Optional)\n- Go to Security → WAF\n- Enable \"OWASP Core Ruleset\"\n- Add custom rules if needed\n\n#### Speed Optimization\n- Go to Speed → Optimization\n- Enable \"Auto Minify\" for CSS, HTML, JS\n- Enable \"Rocket Loader\" for faster JavaScript loading\n\n### 4. Testing Cloudflare Setup\n\n1. **Check DNS**: Visit `https://status.velvotek.xyz` (should load with SSL)\n2. **Verify Cloudflare**: Check response headers for `cf-ray` header\n3. **WebSocket Test**: Ensure real-time updates work at `wss://status.velvotek.xyz/ws`\n4. **SSL Test**: Use [SSL Labs](https://www.ssllabs.com/ssltest/) to verify A+ rating\n5. **Admin Panel**: Test admin access at `https://status.velvotek.xyz/admin`\n\n## Option B: Generic DNS Provider Setup\n\nIf you prefer not to use Cloudflare:\n\n### 1. Domain Registration & DNS Configuration\n\n1. **Register your domain** through any domain registrar (Namecheap, GoDaddy, etc.)\n\n2. **Configure DNS records** in your domain's DNS settings:\n   ```\n   # A record for status subdomain pointing to your server's public IP\n   Type: A\n   Name: status\n   Value: YOUR_SERVER_IP\n   TTL: 300 (or default)\n\n   # Optional: Root domain (if you want velvotek.xyz to redirect)\n   Type: A\n   Name: @ (or leave blank for root domain)\n   Value: YOUR_SERVER_IP\n   TTL: 300\n   ```\n\n3. **Wait for DNS propagation** (can take up to 48 hours, usually much faster)\n\n### 2. Server Setup & Reverse Proxy\n\n#### Install Nginx (recommended reverse proxy)\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install nginx\n\n# CentOS/RHEL\nsudo yum install epel-release\nsudo yum install nginx\n```\n\n#### Configure Nginx for Velvotek Status\nCreate a new Nginx configuration file:\n```bash\nsudo nano /etc/nginx/sites-available/status.velvotek.xyz\n```\n\nAdd this configuration:\n```nginx\nserver {\n    listen 80;\n    server_name status.velvotek.xyz;\n\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n    # WebSocket support for real-time updates\n    location /ws {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n#### Enable the site\n```bash\n# Create symbolic link to enable the site\nsudo ln -s /etc/nginx/sites-available/status.velvotek.xyz /etc/nginx/sites-enabled/\n\n# Test Nginx configuration\nsudo nginx -t\n\n# Restart Nginx\nsudo systemctl restart nginx\nsudo systemctl enable nginx\n```\n\n### 3. SSL Certificate Setup (HTTPS)\n\n#### Install Certbot for Let's Encrypt\n```bash\n# Ubuntu/Debian\nsudo apt install certbot python3-certbot-nginx\n\n# CentOS/RHEL\nsudo yum install certbot python3-certbot-nginx\n```\n\n#### Obtain SSL certificate\n```bash\nsudo certbot --nginx -d status.velvotek.xyz\n```\n\nFollow the prompts to:\n- Enter your email address\n- Agree to terms of service\n- Choose redirect option (recommended: redirect HTTP to HTTPS)\n\n#### Auto-renewal setup\n```bash\n# Test auto-renewal\nsudo certbot renew --dry-run\n\n# Certbot usually sets up auto-renewal automatically\n# Verify with: sudo systemctl status certbot.timer\n```\n\n### 4. Firewall Configuration\n\n#### Configure firewall to allow web traffic\n```bash\n# Ubuntu (UFW)\nsudo ufw allow 'Nginx Full'\nsudo ufw allow ssh\nsudo ufw enable\n\n# CentOS/RHEL (firewalld)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload\n```\n\n### 5. Application Configuration\n\n#### Update your application for production\n```bash\n# Set production environment\nexport NODE_ENV=production\nexport PORT=5000\n\n# Build and start the application\nnpm run build\nnpm start\n```\n\n#### Setup Process Manager (PM2 - recommended)\n```bash\n# Install PM2 globally\nnpm install -g pm2\n\n# Start your application with PM2\npm2 start \"npm start\" --name \"velvotek-status\"\n\n# Save PM2 configuration and setup startup\npm2 save\npm2 startup\n```\n\n### 6. Testing Your Custom Domain\n\n1. **DNS Propagation**: Check if DNS is working\n   ```bash\n   nslookup status.velvotek.xyz\n   dig status.velvotek.xyz\n   ```\n\n2. **HTTP Access**: Visit `http://status.velvotek.xyz` (should redirect to HTTPS)\n\n3. **HTTPS Access**: Visit `https://status.velvotek.xyz`\n\n4. **WebSocket Connection**: Check browser console for WebSocket connection to `wss://status.velvotek.xyz/ws`\n\n5. **Admin Panel**: Test admin access at `https://status.velvotek.xyz/admin`\n\n### 7. Optional: Root Domain Redirect\n\nYou can set up the root domain `velvotek.xyz` to redirect to `status.velvotek.xyz`:\n\n1. **Add Nginx redirect configuration**:\n   ```nginx\n   server {\n       listen 80;\n       server_name velvotek.xyz www.velvotek.xyz;\n       return 301 https://status.velvotek.xyz$request_uri;\n   }\n   ```\n\n2. **Update SSL certificate** to include root domain:\n   ```bash\n   sudo certbot --nginx -d status.velvotek.xyz -d velvotek.xyz -d www.velvotek.xyz\n   ```\n\n### Common Issues & Solutions\n\n**Domain not resolving**: \n- Check DNS propagation with online tools\n- Verify A record points to correct IP\n- Wait up to 48 hours for full propagation\n\n**502 Bad Gateway**: \n- Ensure your application is running on port 5000\n- Check Nginx configuration syntax\n- Verify firewall allows traffic\n\n**WebSocket connection fails**:\n- Ensure `/ws` location block is configured in Nginx\n- Check that WebSocket upgrade headers are set\n- Verify no firewall blocking WebSocket connections\n\n**SSL certificate issues**:\n- Ensure domain points to your server before running Certbot\n- Check that ports 80 and 443 are open\n- Verify domain ownership\n\nYour Velvotek Status dashboard should now be accessible at `https://status.velvotek.xyz` with full SSL encryption and WebSocket support! The admin panel is available at `https://status.velvotek.xyz/admin`.\n\n## Troubleshooting\n\n### Port Already in Use\nIf port 5000 is already in use, set a different port:\n```bash\nPORT=3000 npm run dev\n```\n\n### WebSocket Connection Issues\nMake sure both frontend and backend are running on the same host and port. The WebSocket automatically connects to the same host as the web application.\n\n### Build Issues\nIf you encounter build issues, try:\n```bash\n# Clear node modules and reinstall\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n## License\n\nMIT License - Feel free to use this project for your own monitoring needs.","size_bytes":15221},"setup-local.sh":{"content":"#!/bin/bash\n\necho \"Setting up Velvotek Status for local hosting...\"\necho \"============================================================\"\n\n# Check if Node.js is installed\nif ! command -v node &> /dev/null; then\n    echo \"Error: Node.js is not installed. Please install Node.js version 18 or higher.\"\n    exit 1\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)\nif [ \"$NODE_VERSION\" -lt 18 ]; then\n    echo \"Warning: Node.js version 18 or higher is recommended. Current version: $(node -v)\"\nfi\n\necho \"✓ Node.js detected: $(node -v)\"\n\n# Replace vite.config.ts with local version\nif [ -f \"vite.config.local.ts\" ]; then\n    echo \"✓ Replacing vite.config.ts with local version...\"\n    mv vite.config.ts vite.config.ts.backup\n    mv vite.config.local.ts vite.config.ts\n    echo \"  Original file backed up as vite.config.ts.backup\"\nelse\n    echo \"Warning: vite.config.local.ts not found\"\nfi\n\n# Install dependencies\necho \"✓ Installing dependencies...\"\nnpm install\n\nif [ $? -ne 0 ]; then\n    echo \"Error: Failed to install dependencies\"\n    exit 1\nfi\n\n# Fix Windows compatibility by updating package.json scripts\necho \"✓ Fixing Windows compatibility...\"\nif command -v node &> /dev/null; then\n    node -e \"\n        const fs = require('fs');\n        const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));\n        pkg.scripts.dev = 'cross-env NODE_ENV=development tsx server/index.ts';\n        pkg.scripts.start = 'cross-env NODE_ENV=production node dist/index.js';\n        fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));\n        console.log('  Package.json scripts updated for cross-platform compatibility');\n    \"\nfi\n\necho \"\"\necho \"Setup complete! 🎉\"\necho \"\"\necho \"To start the development server:\"\necho \"  npm run dev\"\necho \"\"\necho \"To build for production:\"\necho \"  npm run build\"\necho \"  npm start\"\necho \"\"\necho \"The application will be available at http://localhost:5000\"\necho \"\"\necho \"For more information, see README-LOCAL-SETUP.md\"","size_bytes":1997},"vite.config.local.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});","size_bytes":686},"server/vite.fixed.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}","size_bytes":2343},"README.md":{"content":"# Velvotek Status\n\nA real-time system monitoring dashboard with a terminal-style interface. Features live system metrics, service status monitoring, process information, and incident tracking.\n\n![Terminal Style Dashboard](https://via.placeholder.com/800x400/1a1a1a/00ff00?text=Terminal+Style+Dashboard)\n\n## ✨ Features\n\n- **Real-time System Monitoring**: Live CPU, memory, and network metrics\n- **Service Status Tracking**: Monitor multiple services with uptime statistics  \n- **Process Management**: View running processes with resource usage\n- **Incident Tracking**: Log and track system incidents\n- **Terminal Aesthetic**: Dark theme with monospace fonts and retro styling\n- **WebSocket Updates**: Real-time data streaming with auto-reconnection\n\n## 🛠 Tech Stack\n\n- **Frontend**: React + TypeScript + Vite + Tailwind CSS + shadcn/ui\n- **Backend**: Express.js + TypeScript + WebSockets\n- **Real-time**: WebSocket connections for live data updates\n- **Database**: PostgreSQL with Drizzle ORM (optional)\n- **Styling**: Terminal-inspired dark theme with monospace fonts\n\n## 🚀 Quick Start\n\n### Prerequisites\n- Node.js (version 18 or higher)\n- npm or yarn package manager\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/yourusername/velvotek-status.git\n   cd velvotek-status\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Start development server**\n   ```bash\n   npm run dev\n   ```\n\n4. **Open your browser**\n   Navigate to `http://localhost:5000`\n\n### Production Build\n\n```bash\n# Build the application\nnpm run build\n\n# Start production server\nnpm start\n```\n\n## 📁 Project Structure\n\n```\nvelvotek-status/\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/     # UI components\n│   │   ├── hooks/          # Custom hooks\n│   │   ├── lib/            # Utilities\n│   │   └── pages/          # Application pages\n├── server/                 # Express backend\n│   ├── routes.ts          # API routes\n│   ├── storage.ts         # Data storage layer\n│   └── monitoring.ts      # System monitoring service\n├── shared/                 # Shared types and schemas\n└── attached_assets/       # Static assets\n```\n\n## 🔧 Configuration\n\nThe application uses environment variables for configuration:\n\n- `NODE_ENV`: Environment (development/production)\n- `DATABASE_URL`: PostgreSQL connection string (optional)\n- `PORT`: Server port (defaults to 5000)\n\n## 📊 Features Overview\n\n### System Monitoring\n- Real-time CPU usage and frequency monitoring\n- Memory usage tracking (total, used, cached, free)\n- Network activity monitoring (upload/download speeds)\n- System load averages and uptime\n\n### Service Management\n- Service status tracking (operational, degraded, outage)\n- Response time monitoring\n- Uptime percentage calculations\n- Historical incident tracking\n\n### Process Monitoring\n- Running process overview\n- CPU and memory usage per process\n- Process thread counts\n- User and command information\n\n## 🎨 Terminal Styling\n\nThe interface mimics classic Unix system monitors with:\n- Dark color schemes with green/amber accents\n- Monospace fonts (JetBrains Mono, Fira Code)\n- ASCII borders and terminal-style progress bars\n- Blinking cursor effects\n- Unicode block characters for visual elements\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📝 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🏗 Development\n\n### Local Setup\nFor detailed local setup instructions, see [README-LOCAL-SETUP.md](README-LOCAL-SETUP.md)\n\n### Database Setup\nThe application can run with in-memory storage or PostgreSQL:\n\n```bash\n# Push database schema (if using PostgreSQL)\nnpm run db:push\n```\n\n### WebSocket Communication\nReal-time updates are handled through WebSocket connections:\n- System metrics broadcast every 2 seconds\n- Service status updates every 30 seconds\n- Automatic reconnection with exponential backoff\n\n## 📞 Support\n\nFor questions, issues, or feature requests:\n- Open an issue on GitHub\n- Check existing documentation in the `README-LOCAL-SETUP.md`\n- Review the project architecture in `replit.md`\n\n---\n\nBuilt with ❤️ for system monitoring enthusiasts","size_bytes":4540}},"version":1}